/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 419 cycles

//   Resources required:
//     96 multipliers (12 x 12 bit)
//     208 adders (12 x 12 bit)
//     24 RAMs (256 words, 24 bits per word)
//     8 RAMs (16 words, 24 bits per word)
//     8 RAMs (64 words, 24 bits per word)
//     12 ROMs (32 words, 12 bits per word)
//     12 ROMs (128 words, 12 bits per word)
//     12 ROMs (8 words, 12 bits per word)

// Generated on Fri Apr 19 20:44:42 EDT 2013

// Latency: 419 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 419 cycles.  This means that
// the 'next_out' will be asserted 419 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


/*module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [11:0] in [15:0];
   wire [11:0] X0;
   wire [11:0] Y0;
   wire [11:0] X1;
   wire [11:0] Y1;
   wire [11:0] X2;
   wire [11:0] Y2;
   wire [11:0] X3;
   wire [11:0] Y3;
   wire [11:0] X4;
   wire [11:0] Y4;
   wire [11:0] X5;
   wire [11:0] Y5;
   wire [11:0] X6;
   wire [11:0] Y6;
   wire [11:0] X7;
   wire [11:0] Y7;
   wire [11:0] X8;
   wire [11:0] Y8;
   wire [11:0] X9;
   wire [11:0] Y9;
   wire [11:0] X10;
   wire [11:0] Y10;
   wire [11:0] X11;
   wire [11:0] Y11;
   wire [11:0] X12;
   wire [11:0] Y12;
   wire [11:0] X13;
   wire [11:0] Y13;
   wire [11:0] X14;
   wire [11:0] Y14;
   wire [11:0] X15;
   wire [11:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 128 cycles
      for (j=0; j < 127; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 127;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 126)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 127; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 2048 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 127;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 2048 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule*/

// Latency: 419
// Gap: 128
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [11:0] t0_0;
   wire [11:0] t0_1;
   wire [11:0] t0_2;
   wire [11:0] t0_3;
   wire [11:0] t0_4;
   wire [11:0] t0_5;
   wire [11:0] t0_6;
   wire [11:0] t0_7;
   wire [11:0] t0_8;
   wire [11:0] t0_9;
   wire [11:0] t0_10;
   wire [11:0] t0_11;
   wire [11:0] t0_12;
   wire [11:0] t0_13;
   wire [11:0] t0_14;
   wire [11:0] t0_15;
   wire next_0;
   wire [11:0] t1_0;
   wire [11:0] t1_1;
   wire [11:0] t1_2;
   wire [11:0] t1_3;
   wire [11:0] t1_4;
   wire [11:0] t1_5;
   wire [11:0] t1_6;
   wire [11:0] t1_7;
   wire [11:0] t1_8;
   wire [11:0] t1_9;
   wire [11:0] t1_10;
   wire [11:0] t1_11;
   wire [11:0] t1_12;
   wire [11:0] t1_13;
   wire [11:0] t1_14;
   wire [11:0] t1_15;
   wire next_1;
   wire [11:0] t2_0;
   wire [11:0] t2_1;
   wire [11:0] t2_2;
   wire [11:0] t2_3;
   wire [11:0] t2_4;
   wire [11:0] t2_5;
   wire [11:0] t2_6;
   wire [11:0] t2_7;
   wire [11:0] t2_8;
   wire [11:0] t2_9;
   wire [11:0] t2_10;
   wire [11:0] t2_11;
   wire [11:0] t2_12;
   wire [11:0] t2_13;
   wire [11:0] t2_14;
   wire [11:0] t2_15;
   wire next_2;
   wire [11:0] t3_0;
   wire [11:0] t3_1;
   wire [11:0] t3_2;
   wire [11:0] t3_3;
   wire [11:0] t3_4;
   wire [11:0] t3_5;
   wire [11:0] t3_6;
   wire [11:0] t3_7;
   wire [11:0] t3_8;
   wire [11:0] t3_9;
   wire [11:0] t3_10;
   wire [11:0] t3_11;
   wire [11:0] t3_12;
   wire [11:0] t3_13;
   wire [11:0] t3_14;
   wire [11:0] t3_15;
   wire next_3;
   wire [11:0] t4_0;
   wire [11:0] t4_1;
   wire [11:0] t4_2;
   wire [11:0] t4_3;
   wire [11:0] t4_4;
   wire [11:0] t4_5;
   wire [11:0] t4_6;
   wire [11:0] t4_7;
   wire [11:0] t4_8;
   wire [11:0] t4_9;
   wire [11:0] t4_10;
   wire [11:0] t4_11;
   wire [11:0] t4_12;
   wire [11:0] t4_13;
   wire [11:0] t4_14;
   wire [11:0] t4_15;
   wire next_4;
   wire [11:0] t5_0;
   wire [11:0] t5_1;
   wire [11:0] t5_2;
   wire [11:0] t5_3;
   wire [11:0] t5_4;
   wire [11:0] t5_5;
   wire [11:0] t5_6;
   wire [11:0] t5_7;
   wire [11:0] t5_8;
   wire [11:0] t5_9;
   wire [11:0] t5_10;
   wire [11:0] t5_11;
   wire [11:0] t5_12;
   wire [11:0] t5_13;
   wire [11:0] t5_14;
   wire [11:0] t5_15;
   wire next_5;
   wire [11:0] t6_0;
   wire [11:0] t6_1;
   wire [11:0] t6_2;
   wire [11:0] t6_3;
   wire [11:0] t6_4;
   wire [11:0] t6_5;
   wire [11:0] t6_6;
   wire [11:0] t6_7;
   wire [11:0] t6_8;
   wire [11:0] t6_9;
   wire [11:0] t6_10;
   wire [11:0] t6_11;
   wire [11:0] t6_12;
   wire [11:0] t6_13;
   wire [11:0] t6_14;
   wire [11:0] t6_15;
   wire next_6;
   wire [11:0] t7_0;
   wire [11:0] t7_1;
   wire [11:0] t7_2;
   wire [11:0] t7_3;
   wire [11:0] t7_4;
   wire [11:0] t7_5;
   wire [11:0] t7_6;
   wire [11:0] t7_7;
   wire [11:0] t7_8;
   wire [11:0] t7_9;
   wire [11:0] t7_10;
   wire [11:0] t7_11;
   wire [11:0] t7_12;
   wire [11:0] t7_13;
   wire [11:0] t7_14;
   wire [11:0] t7_15;
   wire next_7;
   wire [11:0] t8_0;
   wire [11:0] t8_1;
   wire [11:0] t8_2;
   wire [11:0] t8_3;
   wire [11:0] t8_4;
   wire [11:0] t8_5;
   wire [11:0] t8_6;
   wire [11:0] t8_7;
   wire [11:0] t8_8;
   wire [11:0] t8_9;
   wire [11:0] t8_10;
   wire [11:0] t8_11;
   wire [11:0] t8_12;
   wire [11:0] t8_13;
   wire [11:0] t8_14;
   wire [11:0] t8_15;
   wire next_8;
   wire [11:0] t9_0;
   wire [11:0] t9_1;
   wire [11:0] t9_2;
   wire [11:0] t9_3;
   wire [11:0] t9_4;
   wire [11:0] t9_5;
   wire [11:0] t9_6;
   wire [11:0] t9_7;
   wire [11:0] t9_8;
   wire [11:0] t9_9;
   wire [11:0] t9_10;
   wire [11:0] t9_11;
   wire [11:0] t9_12;
   wire [11:0] t9_13;
   wire [11:0] t9_14;
   wire [11:0] t9_15;
   wire next_9;
   wire [11:0] t10_0;
   wire [11:0] t10_1;
   wire [11:0] t10_2;
   wire [11:0] t10_3;
   wire [11:0] t10_4;
   wire [11:0] t10_5;
   wire [11:0] t10_6;
   wire [11:0] t10_7;
   wire [11:0] t10_8;
   wire [11:0] t10_9;
   wire [11:0] t10_10;
   wire [11:0] t10_11;
   wire [11:0] t10_12;
   wire [11:0] t10_13;
   wire [11:0] t10_14;
   wire [11:0] t10_15;
   wire next_10;
   wire [11:0] t11_0;
   wire [11:0] t11_1;
   wire [11:0] t11_2;
   wire [11:0] t11_3;
   wire [11:0] t11_4;
   wire [11:0] t11_5;
   wire [11:0] t11_6;
   wire [11:0] t11_7;
   wire [11:0] t11_8;
   wire [11:0] t11_9;
   wire [11:0] t11_10;
   wire [11:0] t11_11;
   wire [11:0] t11_12;
   wire [11:0] t11_13;
   wire [11:0] t11_14;
   wire [11:0] t11_15;
   wire next_11;
   wire [11:0] t12_0;
   wire [11:0] t12_1;
   wire [11:0] t12_2;
   wire [11:0] t12_3;
   wire [11:0] t12_4;
   wire [11:0] t12_5;
   wire [11:0] t12_6;
   wire [11:0] t12_7;
   wire [11:0] t12_8;
   wire [11:0] t12_9;
   wire [11:0] t12_10;
   wire [11:0] t12_11;
   wire [11:0] t12_12;
   wire [11:0] t12_13;
   wire [11:0] t12_14;
   wire [11:0] t12_15;
   wire next_12;
   wire [11:0] t13_0;
   wire [11:0] t13_1;
   wire [11:0] t13_2;
   wire [11:0] t13_3;
   wire [11:0] t13_4;
   wire [11:0] t13_5;
   wire [11:0] t13_6;
   wire [11:0] t13_7;
   wire [11:0] t13_8;
   wire [11:0] t13_9;
   wire [11:0] t13_10;
   wire [11:0] t13_11;
   wire [11:0] t13_12;
   wire [11:0] t13_13;
   wire [11:0] t13_14;
   wire [11:0] t13_15;
   wire next_13;
   wire [11:0] t14_0;
   wire [11:0] t14_1;
   wire [11:0] t14_2;
   wire [11:0] t14_3;
   wire [11:0] t14_4;
   wire [11:0] t14_5;
   wire [11:0] t14_6;
   wire [11:0] t14_7;
   wire [11:0] t14_8;
   wire [11:0] t14_9;
   wire [11:0] t14_10;
   wire [11:0] t14_11;
   wire [11:0] t14_12;
   wire [11:0] t14_13;
   wire [11:0] t14_14;
   wire [11:0] t14_15;
   wire next_14;
   wire [11:0] t15_0;
   wire [11:0] t15_1;
   wire [11:0] t15_2;
   wire [11:0] t15_3;
   wire [11:0] t15_4;
   wire [11:0] t15_5;
   wire [11:0] t15_6;
   wire [11:0] t15_7;
   wire [11:0] t15_8;
   wire [11:0] t15_9;
   wire [11:0] t15_10;
   wire [11:0] t15_11;
   wire [11:0] t15_12;
   wire [11:0] t15_13;
   wire [11:0] t15_14;
   wire [11:0] t15_15;
   wire next_15;
   assign t0_0 = X0;
   assign Y0 = t15_0;
   assign t0_1 = X1;
   assign Y1 = t15_1;
   assign t0_2 = X2;
   assign Y2 = t15_2;
   assign t0_3 = X3;
   assign Y3 = t15_3;
   assign t0_4 = X4;
   assign Y4 = t15_4;
   assign t0_5 = X5;
   assign Y5 = t15_5;
   assign t0_6 = X6;
   assign Y6 = t15_6;
   assign t0_7 = X7;
   assign Y7 = t15_7;
   assign t0_8 = X8;
   assign Y8 = t15_8;
   assign t0_9 = X9;
   assign Y9 = t15_9;
   assign t0_10 = X10;
   assign Y10 = t15_10;
   assign t0_11 = X11;
   assign Y11 = t15_11;
   assign t0_12 = X12;
   assign Y12 = t15_12;
   assign t0_13 = X13;
   assign Y13 = t15_13;
   assign t0_14 = X14;
   assign Y14 = t15_14;
   assign t0_15 = X15;
   assign Y15 = t15_15;
   assign next_0 = next;
   assign next_out = next_15;

// latency=126, gap=128
   rc14453 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=3, gap=128
   codeBlock14455 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=4, gap=128
   rc14860 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15));


// latency=8, gap=128
   DirSum_15545 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7),
       .X8(t3_8), .Y8(t4_8),
       .X9(t3_9), .Y9(t4_9),
       .X10(t3_10), .Y10(t4_10),
       .X11(t3_11), .Y11(t4_11),
       .X12(t3_12), .Y12(t4_12),
       .X13(t3_13), .Y13(t4_13),
       .X14(t3_14), .Y14(t4_14),
       .X15(t3_15), .Y15(t4_15));


// latency=3, gap=128
   codeBlock15548 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


// latency=11, gap=128
   rc15953 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7),
    .X8(t5_8), .Y8(t6_8),
    .X9(t5_9), .Y9(t6_9),
    .X10(t5_10), .Y10(t6_10),
    .X11(t5_11), .Y11(t6_11),
    .X12(t5_12), .Y12(t6_12),
    .X13(t5_13), .Y13(t6_13),
    .X14(t5_14), .Y14(t6_14),
    .X15(t5_15), .Y15(t6_15));


// latency=8, gap=128
   DirSum_16734 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7),
       .X8(t6_8), .Y8(t7_8),
       .X9(t6_9), .Y9(t7_9),
       .X10(t6_10), .Y10(t7_10),
       .X11(t6_11), .Y11(t7_11),
       .X12(t6_12), .Y12(t7_12),
       .X13(t6_13), .Y13(t7_13),
       .X14(t6_14), .Y14(t7_14),
       .X15(t6_15), .Y15(t7_15));


// latency=3, gap=128
   codeBlock16737 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7),
       .X8_in(t7_8), .Y8(t8_8),
       .X9_in(t7_9), .Y9(t8_9),
       .X10_in(t7_10), .Y10(t8_10),
       .X11_in(t7_11), .Y11(t8_11),
       .X12_in(t7_12), .Y12(t8_12),
       .X13_in(t7_13), .Y13(t8_13),
       .X14_in(t7_14), .Y14(t8_14),
       .X15_in(t7_15), .Y15(t8_15));


// latency=29, gap=128
   rc17142 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7),
    .X8(t8_8), .Y8(t9_8),
    .X9(t8_9), .Y9(t9_9),
    .X10(t8_10), .Y10(t9_10),
    .X11(t8_11), .Y11(t9_11),
    .X12(t8_12), .Y12(t9_12),
    .X13(t8_13), .Y13(t9_13),
    .X14(t8_14), .Y14(t9_14),
    .X15(t8_15), .Y15(t9_15));


// latency=8, gap=128
   DirSum_18307 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7),
       .X8(t9_8), .Y8(t10_8),
       .X9(t9_9), .Y9(t10_9),
       .X10(t9_10), .Y10(t10_10),
       .X11(t9_11), .Y11(t10_11),
       .X12(t9_12), .Y12(t10_12),
       .X13(t9_13), .Y13(t10_13),
       .X14(t9_14), .Y14(t10_14),
       .X15(t9_15), .Y15(t10_15));


// latency=3, gap=128
   codeBlock18310 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7),
       .X8_in(t10_8), .Y8(t11_8),
       .X9_in(t10_9), .Y9(t11_9),
       .X10_in(t10_10), .Y10(t11_10),
       .X11_in(t10_11), .Y11(t11_11),
       .X12_in(t10_12), .Y12(t11_12),
       .X13_in(t10_13), .Y13(t11_13),
       .X14_in(t10_14), .Y14(t11_14),
       .X15_in(t10_15), .Y15(t11_15));


// latency=101, gap=128
   rc18715 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7),
    .X8(t11_8), .Y8(t12_8),
    .X9(t11_9), .Y9(t12_9),
    .X10(t11_10), .Y10(t12_10),
    .X11(t11_11), .Y11(t12_11),
    .X12(t11_12), .Y12(t12_12),
    .X13(t11_13), .Y13(t12_13),
    .X14(t11_14), .Y14(t12_14),
    .X15(t11_15), .Y15(t12_15));


// latency=8, gap=128
   DirSum_21415 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3),
       .X4(t12_4), .Y4(t13_4),
       .X5(t12_5), .Y5(t13_5),
       .X6(t12_6), .Y6(t13_6),
       .X7(t12_7), .Y7(t13_7),
       .X8(t12_8), .Y8(t13_8),
       .X9(t12_9), .Y9(t13_9),
       .X10(t12_10), .Y10(t13_10),
       .X11(t12_11), .Y11(t13_11),
       .X12(t12_12), .Y12(t13_12),
       .X13(t12_13), .Y13(t13_13),
       .X14(t12_14), .Y14(t13_14),
       .X15(t12_15), .Y15(t13_15));


// latency=3, gap=128
   codeBlock21418 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3),
       .X4_in(t13_4), .Y4(t14_4),
       .X5_in(t13_5), .Y5(t14_5),
       .X6_in(t13_6), .Y6(t14_6),
       .X7_in(t13_7), .Y7(t14_7),
       .X8_in(t13_8), .Y8(t14_8),
       .X9_in(t13_9), .Y9(t14_9),
       .X10_in(t13_10), .Y10(t14_10),
       .X11_in(t13_11), .Y11(t14_11),
       .X12_in(t13_12), .Y12(t14_12),
       .X13_in(t13_13), .Y13(t14_13),
       .X14_in(t13_14), .Y14(t14_14),
       .X15_in(t13_15), .Y15(t14_15));


// latency=101, gap=128
   rc21823 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3),
    .X4(t14_4), .Y4(t15_4),
    .X5(t14_5), .Y5(t15_5),
    .X6(t14_6), .Y6(t15_6),
    .X7(t14_7), .Y7(t15_7),
    .X8(t14_8), .Y8(t15_8),
    .X9(t14_9), .Y9(t15_9),
    .X10(t14_10), .Y10(t15_10),
    .X11(t14_11), .Y11(t15_11),
    .X12(t14_12), .Y12(t15_12),
    .X13(t14_13), .Y13(t15_13),
    .X14(t14_14), .Y14(t15_14),
    .X15(t14_15), .Y15(t15_15));


endmodule

// Latency: 126
// Gap: 128
module rc14453(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm14451 instPerm25016(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 126
// Gap: 128
module perm14451(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[8] ^ addr0[2];
   assign inBank0[1] = addr0[9] ^ addr0[0];
   assign inBank0[2] = addr0[6] ^ addr0[1];
   assign inAddr0[0] = addr0[7];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[2];
   assign inAddr0[4] = addr0[3];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[8] ^ addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[8] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[8] ^ addr1[2];
   assign inBank1[1] = addr1[9] ^ addr1[0];
   assign inBank1[2] = addr1[6] ^ addr1[1];
   assign inAddr1[0] = addr1[7];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[2];
   assign inAddr1[4] = addr1[3];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[8] ^ addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[8] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[8] ^ addr2[2];
   assign inBank2[1] = addr2[9] ^ addr2[0];
   assign inBank2[2] = addr2[6] ^ addr2[1];
   assign inAddr2[0] = addr2[7];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[2];
   assign inAddr2[4] = addr2[3];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[8] ^ addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[8] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[8] ^ addr3[2];
   assign inBank3[1] = addr3[9] ^ addr3[0];
   assign inBank3[2] = addr3[6] ^ addr3[1];
   assign inAddr3[0] = addr3[7];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[2];
   assign inAddr3[4] = addr3[3];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[8] ^ addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[8] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[8] ^ addr4[2];
   assign inBank4[1] = addr4[9] ^ addr4[0];
   assign inBank4[2] = addr4[6] ^ addr4[1];
   assign inAddr4[0] = addr4[7];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[2];
   assign inAddr4[4] = addr4[3];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[8] ^ addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[8] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[8] ^ addr5[2];
   assign inBank5[1] = addr5[9] ^ addr5[0];
   assign inBank5[2] = addr5[6] ^ addr5[1];
   assign inAddr5[0] = addr5[7];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[2];
   assign inAddr5[4] = addr5[3];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[8] ^ addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[8] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[8] ^ addr6[2];
   assign inBank6[1] = addr6[9] ^ addr6[0];
   assign inBank6[2] = addr6[6] ^ addr6[1];
   assign inAddr6[0] = addr6[7];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[2];
   assign inAddr6[4] = addr6[3];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[8] ^ addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[8] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[8] ^ addr7[2];
   assign inBank7[1] = addr7[9] ^ addr7[0];
   assign inBank7[2] = addr7[6] ^ addr7[1];
   assign inAddr7[0] = addr7[7];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[2];
   assign inAddr7[4] = addr7[3];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[8] ^ addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[8] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(120, 7) nextReg_25021(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_25024(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_14451 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 119)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 123)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 119) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 119)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_3 = {x5, inAddr5};
    assign w_0_5 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[5];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_4_pipe), .y0(w_3_0), .y1(w_3_4), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_1_pipe), .x1(w_2_5_pipe), .y0(w_3_1), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_2_pipe), .x1(w_2_6_pipe), .y0(w_3_2), .y1(w_3_6), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_3_pipe), .x1(w_2_7_pipe), .y0(w_3_3), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray1024_14451(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_25029(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock14455(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_25036(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a994;
   wire signed [11:0] a995;
   wire signed [11:0] a996;
   wire signed [11:0] a997;
   wire signed [11:0] a1002;
   wire signed [11:0] a1003;
   wire signed [11:0] a1004;
   wire signed [11:0] a1005;
   wire signed [11:0] a1010;
   wire signed [11:0] a1011;
   wire signed [11:0] a1012;
   wire signed [11:0] a1013;
   wire signed [11:0] a1018;
   wire signed [11:0] a1019;
   wire signed [11:0] a1020;
   wire signed [11:0] a1021;
   wire signed [12:0] tm309;
   wire signed [12:0] tm310;
   wire signed [12:0] tm311;
   wire signed [12:0] tm312;
   wire signed [12:0] tm313;
   wire signed [12:0] tm314;
   wire signed [12:0] tm315;
   wire signed [12:0] tm316;
   wire signed [12:0] tm325;
   wire signed [12:0] tm326;
   wire signed [12:0] tm327;
   wire signed [12:0] tm328;
   wire signed [12:0] tm329;
   wire signed [12:0] tm330;
   wire signed [12:0] tm331;
   wire signed [12:0] tm332;
   wire signed [11:0] t1170;
   wire signed [11:0] t1171;
   wire signed [11:0] t1172;
   wire signed [11:0] t1173;
   wire signed [11:0] t1174;
   wire signed [11:0] t1175;
   wire signed [11:0] t1176;
   wire signed [11:0] t1177;
   wire signed [11:0] t1186;
   wire signed [11:0] t1187;
   wire signed [11:0] t1188;
   wire signed [11:0] t1189;
   wire signed [11:0] t1190;
   wire signed [11:0] t1191;
   wire signed [11:0] t1192;
   wire signed [11:0] t1193;
   wire signed [12:0] tm317;
   wire signed [12:0] tm318;
   wire signed [12:0] tm319;
   wire signed [12:0] tm320;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [12:0] tm321;
   wire signed [12:0] tm322;
   wire signed [12:0] tm323;
   wire signed [12:0] tm324;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [12:0] tm333;
   wire signed [12:0] tm334;
   wire signed [12:0] tm335;
   wire signed [12:0] tm336;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [12:0] tm337;
   wire signed [12:0] tm338;
   wire signed [12:0] tm339;
   wire signed [12:0] tm340;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   wire signed [11:0] t1178;
   wire signed [11:0] t1179;
   wire signed [11:0] t1180;
   wire signed [11:0] t1181;
   wire signed [11:0] t1182;
   wire signed [11:0] t1183;
   wire signed [11:0] t1184;
   wire signed [11:0] t1185;
   wire signed [11:0] t1194;
   wire signed [11:0] t1195;
   wire signed [11:0] t1196;
   wire signed [11:0] t1197;
   wire signed [11:0] t1198;
   wire signed [11:0] t1199;
   wire signed [11:0] t1200;
   wire signed [11:0] t1201;


   assign a994 = X0;
   assign a995 = X4;
   assign a996 = X1;
   assign a997 = X5;
   assign a1002 = X2;
   assign a1003 = X6;
   assign a1004 = X3;
   assign a1005 = X7;
   assign a1010 = X8;
   assign a1011 = X12;
   assign a1012 = X9;
   assign a1013 = X13;
   assign a1018 = X10;
   assign a1019 = X14;
   assign a1020 = X11;
   assign a1021 = X15;
   assign t1170 = tm309[12:1];
   assign t1171 = tm310[12:1];
   assign t1172 = tm311[12:1];
   assign t1173 = tm312[12:1];
   assign t1174 = tm313[12:1];
   assign t1175 = tm314[12:1];
   assign t1176 = tm315[12:1];
   assign t1177 = tm316[12:1];
   assign t1186 = tm325[12:1];
   assign t1187 = tm326[12:1];
   assign t1188 = tm327[12:1];
   assign t1189 = tm328[12:1];
   assign t1190 = tm329[12:1];
   assign t1191 = tm330[12:1];
   assign t1192 = tm331[12:1];
   assign t1193 = tm332[12:1];
   assign Y0 = t1178;
   assign Y1 = t1179;
   assign Y4 = t1180;
   assign Y5 = t1181;
   assign Y2 = t1182;
   assign Y3 = t1183;
   assign Y6 = t1184;
   assign Y7 = t1185;
   assign Y8 = t1194;
   assign Y9 = t1195;
   assign Y12 = t1196;
   assign Y13 = t1197;
   assign Y10 = t1198;
   assign Y11 = t1199;
   assign Y14 = t1200;
   assign Y15 = t1201;
   assign t1178 = tm317[12:1];
   assign t1179 = tm318[12:1];
   assign t1180 = tm319[12:1];
   assign t1181 = tm320[12:1];
   assign t1182 = tm321[12:1];
   assign t1183 = tm322[12:1];
   assign t1184 = tm323[12:1];
   assign t1185 = tm324[12:1];
   assign t1194 = tm333[12:1];
   assign t1195 = tm334[12:1];
   assign t1196 = tm335[12:1];
   assign t1197 = tm336[12:1];
   assign t1198 = tm337[12:1];
   assign t1199 = tm338[12:1];
   assign t1200 = tm339[12:1];
   assign t1201 = tm340[12:1];

    addfxp #(13, 1) add14467(.a({{1{a994[11]}}, a994}), .b({{1{a995[11]}}, a995}), .clk(clk), .q(tm309));    // 0
    addfxp #(13, 1) add14482(.a({{1{a996[11]}}, a996}), .b({{1{a997[11]}}, a997}), .clk(clk), .q(tm310));    // 0
    subfxp #(13, 1) sub14496(.a({{1{a994[11]}}, a994}), .b({{1{a995[11]}}, a995}), .clk(clk), .q(tm311));    // 0
    subfxp #(13, 1) sub14510(.a({{1{a996[11]}}, a996}), .b({{1{a997[11]}}, a997}), .clk(clk), .q(tm312));    // 0
    addfxp #(13, 1) add14525(.a({{1{a1002[11]}}, a1002}), .b({{1{a1003[11]}}, a1003}), .clk(clk), .q(tm313));    // 0
    addfxp #(13, 1) add14540(.a({{1{a1004[11]}}, a1004}), .b({{1{a1005[11]}}, a1005}), .clk(clk), .q(tm314));    // 0
    subfxp #(13, 1) sub14554(.a({{1{a1002[11]}}, a1002}), .b({{1{a1003[11]}}, a1003}), .clk(clk), .q(tm315));    // 0
    subfxp #(13, 1) sub14568(.a({{1{a1004[11]}}, a1004}), .b({{1{a1005[11]}}, a1005}), .clk(clk), .q(tm316));    // 0
    addfxp #(13, 1) add14667(.a({{1{a1010[11]}}, a1010}), .b({{1{a1011[11]}}, a1011}), .clk(clk), .q(tm325));    // 0
    addfxp #(13, 1) add14682(.a({{1{a1012[11]}}, a1012}), .b({{1{a1013[11]}}, a1013}), .clk(clk), .q(tm326));    // 0
    subfxp #(13, 1) sub14696(.a({{1{a1010[11]}}, a1010}), .b({{1{a1011[11]}}, a1011}), .clk(clk), .q(tm327));    // 0
    subfxp #(13, 1) sub14710(.a({{1{a1012[11]}}, a1012}), .b({{1{a1013[11]}}, a1013}), .clk(clk), .q(tm328));    // 0
    addfxp #(13, 1) add14725(.a({{1{a1018[11]}}, a1018}), .b({{1{a1019[11]}}, a1019}), .clk(clk), .q(tm329));    // 0
    addfxp #(13, 1) add14740(.a({{1{a1020[11]}}, a1020}), .b({{1{a1021[11]}}, a1021}), .clk(clk), .q(tm330));    // 0
    subfxp #(13, 1) sub14754(.a({{1{a1018[11]}}, a1018}), .b({{1{a1019[11]}}, a1019}), .clk(clk), .q(tm331));    // 0
    subfxp #(13, 1) sub14768(.a({{1{a1020[11]}}, a1020}), .b({{1{a1021[11]}}, a1021}), .clk(clk), .q(tm332));    // 0
    addfxp #(13, 1) add14575(.a({{1{t1170[11]}}, t1170}), .b({{1{t1174[11]}}, t1174}), .clk(clk), .q(tm317));    // 1
    addfxp #(13, 1) add14582(.a({{1{t1171[11]}}, t1171}), .b({{1{t1175[11]}}, t1175}), .clk(clk), .q(tm318));    // 1
    subfxp #(13, 1) sub14588(.a({{1{t1170[11]}}, t1170}), .b({{1{t1174[11]}}, t1174}), .clk(clk), .q(tm319));    // 1
    subfxp #(13, 1) sub14594(.a({{1{t1171[11]}}, t1171}), .b({{1{t1175[11]}}, t1175}), .clk(clk), .q(tm320));    // 1
    addfxp #(13, 1) add14617(.a({{1{t1172[11]}}, t1172}), .b({{1{t1177[11]}}, t1177}), .clk(clk), .q(tm321));    // 1
    subfxp #(13, 1) sub14623(.a({{1{t1173[11]}}, t1173}), .b({{1{t1176[11]}}, t1176}), .clk(clk), .q(tm322));    // 1
    subfxp #(13, 1) sub14629(.a({{1{t1172[11]}}, t1172}), .b({{1{t1177[11]}}, t1177}), .clk(clk), .q(tm323));    // 1
    addfxp #(13, 1) add14636(.a({{1{t1173[11]}}, t1173}), .b({{1{t1176[11]}}, t1176}), .clk(clk), .q(tm324));    // 1
    addfxp #(13, 1) add14775(.a({{1{t1186[11]}}, t1186}), .b({{1{t1190[11]}}, t1190}), .clk(clk), .q(tm333));    // 1
    addfxp #(13, 1) add14782(.a({{1{t1187[11]}}, t1187}), .b({{1{t1191[11]}}, t1191}), .clk(clk), .q(tm334));    // 1
    subfxp #(13, 1) sub14788(.a({{1{t1186[11]}}, t1186}), .b({{1{t1190[11]}}, t1190}), .clk(clk), .q(tm335));    // 1
    subfxp #(13, 1) sub14794(.a({{1{t1187[11]}}, t1187}), .b({{1{t1191[11]}}, t1191}), .clk(clk), .q(tm336));    // 1
    addfxp #(13, 1) add14817(.a({{1{t1188[11]}}, t1188}), .b({{1{t1193[11]}}, t1193}), .clk(clk), .q(tm337));    // 1
    subfxp #(13, 1) sub14823(.a({{1{t1189[11]}}, t1189}), .b({{1{t1192[11]}}, t1192}), .clk(clk), .q(tm338));    // 1
    subfxp #(13, 1) sub14829(.a({{1{t1188[11]}}, t1188}), .b({{1{t1193[11]}}, t1193}), .clk(clk), .q(tm339));    // 1
    addfxp #(13, 1) add14836(.a({{1{t1189[11]}}, t1189}), .b({{1{t1192[11]}}, t1192}), .clk(clk), .q(tm340));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc14860(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm14858 instPerm25037(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm14858(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[2];
   assign inBank0[1] = addr0[3] ^ addr0[1];
   assign inBank0[2] = addr0[0];
   assign inAddr0[0] = addr0[1];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[3] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[3] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[2];
   assign inBank1[1] = addr1[3] ^ addr1[1];
   assign inBank1[2] = addr1[0];
   assign inAddr1[0] = addr1[1];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[3] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[3] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[2];
   assign inBank2[1] = addr2[3] ^ addr2[1];
   assign inBank2[2] = addr2[0];
   assign inAddr2[0] = addr2[1];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[3] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[3] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[2];
   assign inBank3[1] = addr3[3] ^ addr3[1];
   assign inBank3[2] = addr3[0];
   assign inAddr3[0] = addr3[1];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[3] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[3] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[2];
   assign inBank4[1] = addr4[3] ^ addr4[1];
   assign inBank4[2] = addr4[0];
   assign inAddr4[0] = addr4[1];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[3] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[3] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[2];
   assign inBank5[1] = addr5[3] ^ addr5[1];
   assign inBank5[2] = addr5[0];
   assign inAddr5[0] = addr5[1];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[3] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[3] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[2];
   assign inBank6[1] = addr6[3] ^ addr6[1];
   assign inBank6[2] = addr6[0];
   assign inAddr6[0] = addr6[1];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[3] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[3] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[2];
   assign inBank7[1] = addr7[3] ^ addr7[1];
   assign inBank7[2] = addr7[0];
   assign inAddr7[0] = addr7[1];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[3] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[3] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_25040(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_25043(.X(next0), .Y(next_out), .clk(clk));


   memArray16_14858 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_4 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_14858(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_25046(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 2
module DirSum_15545(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i4;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 1)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock14863 codeBlockIsnt25047(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D72(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hc4e;
      1: out3 <= 12'h188;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D70(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'he78;
      1: out3 <= 12'hc4e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D68(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hd2c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D67(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D64(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h188;
      1: out3 <= 12'hc4e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D63(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h2d4;
      1: out3 <= 12'hd2c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D62(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3b2;
      1: out3 <= 12'h188;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D60(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'hd2c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D59(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D58(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h2d4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock14863(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i4_in;
   reg [0:0] i4;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_25050(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a920;
   reg signed [11:0] tm13;
   reg signed [11:0] tm89;
   wire signed [11:0] a930;
   wire signed [11:0] a883;
   wire signed [11:0] a933;
   wire signed [11:0] a887;
   wire signed [11:0] a934;
   wire signed [11:0] a935;
   wire signed [11:0] a938;
   wire signed [11:0] a939;
   wire signed [11:0] a942;
   wire signed [11:0] a943;
   wire signed [11:0] a946;
   wire signed [11:0] a907;
   wire signed [11:0] a949;
   wire signed [11:0] a911;
   wire signed [11:0] a950;
   wire signed [11:0] a951;
   wire signed [11:0] a954;
   wire signed [11:0] a955;
   wire signed [11:0] a958;
   wire signed [11:0] a959;
   reg signed [11:0] tm469;
   reg signed [11:0] tm473;
   reg signed [11:0] tm485;
   reg signed [11:0] tm489;
   reg signed [11:0] tm501;
   reg signed [11:0] tm505;
   reg signed [11:0] tm517;
   reg signed [11:0] tm521;
   reg signed [11:0] tm533;
   reg signed [11:0] tm541;
   reg signed [11:0] tm549;
   reg signed [11:0] tm553;
   reg signed [11:0] tm565;
   reg signed [11:0] tm572;
   reg signed [11:0] tm579;
   reg signed [11:0] tm586;
   wire signed [11:0] a921;
   wire signed [11:0] a922;
   reg signed [11:0] tm470;
   reg signed [11:0] tm474;
   reg signed [11:0] tm486;
   reg signed [11:0] tm490;
   reg signed [11:0] tm502;
   reg signed [11:0] tm506;
   reg signed [11:0] tm518;
   reg signed [11:0] tm522;
   reg signed [11:0] tm534;
   reg signed [11:0] tm542;
   reg signed [11:0] tm550;
   reg signed [11:0] tm554;
   reg signed [11:0] tm566;
   reg signed [11:0] tm573;
   reg signed [11:0] tm580;
   reg signed [11:0] tm587;
   wire signed [11:0] tm2;
   wire signed [11:0] a888;
   wire signed [11:0] tm3;
   wire signed [11:0] a890;
   wire signed [11:0] tm4;
   wire signed [11:0] a894;
   wire signed [11:0] tm5;
   wire signed [11:0] a896;
   wire signed [11:0] tm6;
   wire signed [11:0] a900;
   wire signed [11:0] tm10;
   wire signed [11:0] a912;
   wire signed [11:0] tm11;
   wire signed [11:0] a914;
   wire signed [11:0] tm12;
   wire signed [11:0] a918;
   wire signed [11:0] tm14;
   wire signed [11:0] a924;
   wire signed [11:0] tm15;
   wire signed [11:0] a926;
   reg signed [11:0] tm471;
   reg signed [11:0] tm475;
   reg signed [11:0] tm487;
   reg signed [11:0] tm491;
   reg signed [11:0] tm503;
   reg signed [11:0] tm507;
   reg signed [11:0] tm519;
   reg signed [11:0] tm523;
   reg signed [11:0] tm535;
   reg signed [11:0] tm537;
   reg signed [11:0] tm543;
   reg signed [11:0] tm545;
   reg signed [11:0] tm551;
   reg signed [11:0] tm555;
   reg signed [11:0] tm567;
   reg signed [11:0] tm574;
   reg signed [11:0] tm581;
   reg signed [11:0] tm588;
   reg signed [11:0] tm68;
   reg signed [11:0] tm69;
   reg signed [11:0] tm72;
   reg signed [11:0] tm73;
   reg signed [11:0] tm76;
   reg signed [11:0] tm84;
   reg signed [11:0] tm85;
   reg signed [11:0] tm88;
   reg signed [11:0] tm92;
   reg signed [11:0] tm93;
   reg signed [11:0] tm472;
   reg signed [11:0] tm476;
   reg signed [11:0] tm488;
   reg signed [11:0] tm492;
   reg signed [11:0] tm504;
   reg signed [11:0] tm508;
   reg signed [11:0] tm520;
   reg signed [11:0] tm524;
   reg signed [11:0] tm536;
   reg signed [11:0] tm538;
   reg signed [11:0] tm544;
   reg signed [11:0] tm546;
   reg signed [11:0] tm552;
   reg signed [11:0] tm556;
   reg signed [11:0] tm568;
   reg signed [11:0] tm575;
   reg signed [11:0] tm582;
   reg signed [11:0] tm589;
   reg signed [11:0] tm539;
   reg signed [11:0] tm547;
   reg signed [11:0] tm569;
   reg signed [11:0] tm576;
   reg signed [11:0] tm583;
   reg signed [11:0] tm590;
   wire signed [11:0] a889;
   wire signed [11:0] a891;
   wire signed [11:0] a892;
   wire signed [11:0] a893;
   wire signed [11:0] a895;
   wire signed [11:0] a897;
   wire signed [11:0] a898;
   wire signed [11:0] a899;
   wire signed [11:0] a901;
   wire signed [11:0] a903;
   wire signed [11:0] a904;
   wire signed [11:0] a905;
   wire signed [11:0] a913;
   wire signed [11:0] a915;
   wire signed [11:0] a916;
   wire signed [11:0] a917;
   wire signed [11:0] a919;
   wire signed [11:0] a923;
   wire signed [11:0] a925;
   wire signed [11:0] a927;
   wire signed [11:0] a928;
   wire signed [11:0] a929;
   reg signed [11:0] tm540;
   reg signed [11:0] tm548;
   reg signed [11:0] tm570;
   reg signed [11:0] tm577;
   reg signed [11:0] tm584;
   reg signed [11:0] tm591;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   reg signed [11:0] tm571;
   reg signed [11:0] tm578;
   reg signed [11:0] tm585;
   reg signed [11:0] tm592;

   wire signed [11:0] tm220;
   assign tm220 = 12'hd2c;

   assign a920 = tm13;
   assign a930 = X0;
   assign a883 = a930;
   assign a933 = X1;
   assign a887 = a933;
   assign a934 = X2;
   assign a935 = X3;
   assign a938 = X4;
   assign a939 = X5;
   assign a942 = X6;
   assign a943 = X7;
   assign a946 = X8;
   assign a907 = a946;
   assign a949 = X9;
   assign a911 = a949;
   assign a950 = X10;
   assign a951 = X11;
   assign a954 = X12;
   assign a955 = X13;
   assign a958 = X14;
   assign a959 = X15;
   assign a888 = tm2;
   assign a890 = tm3;
   assign a894 = tm4;
   assign a896 = tm5;
   assign a900 = tm6;
   assign a912 = tm10;
   assign a914 = tm11;
   assign a918 = tm12;
   assign a924 = tm14;
   assign a926 = tm15;
   assign Y0 = tm571;
   assign Y1 = tm578;
   assign Y8 = tm585;
   assign Y9 = tm592;

   D72 instD72inst0(.addr(i4[0:0]), .out(tm15), .clk(clk));

   D70 instD70inst0(.addr(i4[0:0]), .out(tm11), .clk(clk));

   D68 instD68inst0(.addr(i4[0:0]), .out(tm3), .clk(clk));

   D67 instD67inst0(.addr(i4[0:0]), .out(tm5), .clk(clk));

   D64 instD64inst0(.addr(i4[0:0]), .out(tm14), .clk(clk));

   D63 instD63inst0(.addr(i4[0:0]), .out(tm12), .clk(clk));

   D62 instD62inst0(.addr(i4[0:0]), .out(tm10), .clk(clk));

   D60 instD60inst0(.addr(i4[0:0]), .out(tm6), .clk(clk));

   D59 instD59inst0(.addr(i4[0:0]), .out(tm4), .clk(clk));

   D58 instD58inst0(.addr(i4[0:0]), .out(tm2), .clk(clk));

    multfix #(12, 2) m15378(.a(tm89), .b(a955), .clk(clk), .q_sc(a921), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15395(.a(tm89), .b(a954), .clk(clk), .q_sc(a922), .q_unsc(), .rst(reset));
    multfix #(12, 2) m14961(.a(tm68), .b(tm472), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(12, 2) m14983(.a(tm69), .b(tm476), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15000(.a(tm69), .b(tm472), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15011(.a(tm68), .b(tm476), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15040(.a(tm72), .b(tm488), .clk(clk), .q_sc(a895), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15062(.a(tm73), .b(tm492), .clk(clk), .q_sc(a897), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15079(.a(tm73), .b(tm488), .clk(clk), .q_sc(a898), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15090(.a(tm72), .b(tm492), .clk(clk), .q_sc(a899), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15119(.a(tm76), .b(tm504), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15141(.a(tm69), .b(tm508), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15158(.a(tm69), .b(tm504), .clk(clk), .q_sc(a904), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15169(.a(tm76), .b(tm508), .clk(clk), .q_sc(a905), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15277(.a(tm84), .b(tm520), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15299(.a(tm85), .b(tm524), .clk(clk), .q_sc(a915), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15316(.a(tm85), .b(tm520), .clk(clk), .q_sc(a916), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15327(.a(tm84), .b(tm524), .clk(clk), .q_sc(a917), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15356(.a(tm88), .b(tm536), .clk(clk), .q_sc(a919), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15406(.a(tm88), .b(tm544), .clk(clk), .q_sc(a923), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15435(.a(tm92), .b(tm552), .clk(clk), .q_sc(a925), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15457(.a(tm93), .b(tm556), .clk(clk), .q_sc(a927), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15474(.a(tm93), .b(tm552), .clk(clk), .q_sc(a928), .q_unsc(), .rst(reset));
    multfix #(12, 2) m15485(.a(tm92), .b(tm556), .clk(clk), .q_sc(a929), .q_unsc(), .rst(reset));
    subfxp #(12, 1) sub14989(.a(a889), .b(a891), .clk(clk), .q(Y2));    // 6
    addfxp #(12, 1) add15018(.a(a892), .b(a893), .clk(clk), .q(Y3));    // 6
    subfxp #(12, 1) sub15068(.a(a895), .b(a897), .clk(clk), .q(Y4));    // 6
    addfxp #(12, 1) add15097(.a(a898), .b(a899), .clk(clk), .q(Y5));    // 6
    subfxp #(12, 1) sub15147(.a(a901), .b(a903), .clk(clk), .q(Y6));    // 6
    addfxp #(12, 1) add15176(.a(a904), .b(a905), .clk(clk), .q(Y7));    // 6
    subfxp #(12, 1) sub15305(.a(a913), .b(a915), .clk(clk), .q(Y10));    // 6
    addfxp #(12, 1) add15334(.a(a916), .b(a917), .clk(clk), .q(Y11));    // 6
    subfxp #(12, 1) sub15384(.a(a919), .b(tm540), .clk(clk), .q(Y12));    // 6
    addfxp #(12, 1) add15413(.a(tm548), .b(a923), .clk(clk), .q(Y13));    // 6
    subfxp #(12, 1) sub15463(.a(a925), .b(a927), .clk(clk), .q(Y14));    // 6
    addfxp #(12, 1) add15492(.a(a928), .b(a929), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm89 <= 0;
         tm89 <= 0;
         tm68 <= 0;
         tm472 <= 0;
         tm69 <= 0;
         tm476 <= 0;
         tm69 <= 0;
         tm472 <= 0;
         tm68 <= 0;
         tm476 <= 0;
         tm72 <= 0;
         tm488 <= 0;
         tm73 <= 0;
         tm492 <= 0;
         tm73 <= 0;
         tm488 <= 0;
         tm72 <= 0;
         tm492 <= 0;
         tm76 <= 0;
         tm504 <= 0;
         tm69 <= 0;
         tm508 <= 0;
         tm69 <= 0;
         tm504 <= 0;
         tm76 <= 0;
         tm508 <= 0;
         tm84 <= 0;
         tm520 <= 0;
         tm85 <= 0;
         tm524 <= 0;
         tm85 <= 0;
         tm520 <= 0;
         tm84 <= 0;
         tm524 <= 0;
         tm88 <= 0;
         tm536 <= 0;
         tm88 <= 0;
         tm544 <= 0;
         tm92 <= 0;
         tm552 <= 0;
         tm93 <= 0;
         tm556 <= 0;
         tm93 <= 0;
         tm552 <= 0;
         tm92 <= 0;
         tm556 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm13 <= tm220;
         tm89 <= a920;
         tm469 <= a934;
         tm473 <= a935;
         tm485 <= a938;
         tm489 <= a939;
         tm501 <= a942;
         tm505 <= a943;
         tm517 <= a950;
         tm521 <= a951;
         tm533 <= a954;
         tm541 <= a955;
         tm549 <= a958;
         tm553 <= a959;
         tm565 <= a883;
         tm572 <= a887;
         tm579 <= a907;
         tm586 <= a911;
         tm470 <= tm469;
         tm474 <= tm473;
         tm486 <= tm485;
         tm490 <= tm489;
         tm502 <= tm501;
         tm506 <= tm505;
         tm518 <= tm517;
         tm522 <= tm521;
         tm534 <= tm533;
         tm542 <= tm541;
         tm550 <= tm549;
         tm554 <= tm553;
         tm566 <= tm565;
         tm573 <= tm572;
         tm580 <= tm579;
         tm587 <= tm586;
         tm471 <= tm470;
         tm475 <= tm474;
         tm487 <= tm486;
         tm491 <= tm490;
         tm503 <= tm502;
         tm507 <= tm506;
         tm519 <= tm518;
         tm523 <= tm522;
         tm535 <= tm534;
         tm537 <= a921;
         tm543 <= tm542;
         tm545 <= a922;
         tm551 <= tm550;
         tm555 <= tm554;
         tm567 <= tm566;
         tm574 <= tm573;
         tm581 <= tm580;
         tm588 <= tm587;
         tm68 <= a888;
         tm69 <= a890;
         tm72 <= a894;
         tm73 <= a896;
         tm76 <= a900;
         tm84 <= a912;
         tm85 <= a914;
         tm88 <= a918;
         tm92 <= a924;
         tm93 <= a926;
         tm472 <= tm471;
         tm476 <= tm475;
         tm488 <= tm487;
         tm492 <= tm491;
         tm504 <= tm503;
         tm508 <= tm507;
         tm520 <= tm519;
         tm524 <= tm523;
         tm536 <= tm535;
         tm538 <= tm537;
         tm544 <= tm543;
         tm546 <= tm545;
         tm552 <= tm551;
         tm556 <= tm555;
         tm568 <= tm567;
         tm575 <= tm574;
         tm582 <= tm581;
         tm589 <= tm588;
         tm539 <= tm538;
         tm547 <= tm546;
         tm569 <= tm568;
         tm576 <= tm575;
         tm583 <= tm582;
         tm590 <= tm589;
         tm540 <= tm539;
         tm548 <= tm547;
         tm570 <= tm569;
         tm577 <= tm576;
         tm584 <= tm583;
         tm591 <= tm590;
         tm571 <= tm570;
         tm578 <= tm577;
         tm585 <= tm584;
         tm592 <= tm591;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock15548(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_25053(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a754;
   wire signed [11:0] a755;
   wire signed [11:0] a756;
   wire signed [11:0] a757;
   wire signed [11:0] a762;
   wire signed [11:0] a763;
   wire signed [11:0] a764;
   wire signed [11:0] a765;
   wire signed [11:0] a770;
   wire signed [11:0] a771;
   wire signed [11:0] a772;
   wire signed [11:0] a773;
   wire signed [11:0] a778;
   wire signed [11:0] a779;
   wire signed [11:0] a780;
   wire signed [11:0] a781;
   wire signed [12:0] tm341;
   wire signed [12:0] tm342;
   wire signed [12:0] tm343;
   wire signed [12:0] tm344;
   wire signed [12:0] tm345;
   wire signed [12:0] tm346;
   wire signed [12:0] tm347;
   wire signed [12:0] tm348;
   wire signed [12:0] tm357;
   wire signed [12:0] tm358;
   wire signed [12:0] tm359;
   wire signed [12:0] tm360;
   wire signed [12:0] tm361;
   wire signed [12:0] tm362;
   wire signed [12:0] tm363;
   wire signed [12:0] tm364;
   wire signed [11:0] t930;
   wire signed [11:0] t931;
   wire signed [11:0] t932;
   wire signed [11:0] t933;
   wire signed [11:0] t934;
   wire signed [11:0] t935;
   wire signed [11:0] t936;
   wire signed [11:0] t937;
   wire signed [11:0] t946;
   wire signed [11:0] t947;
   wire signed [11:0] t948;
   wire signed [11:0] t949;
   wire signed [11:0] t950;
   wire signed [11:0] t951;
   wire signed [11:0] t952;
   wire signed [11:0] t953;
   wire signed [12:0] tm349;
   wire signed [12:0] tm350;
   wire signed [12:0] tm351;
   wire signed [12:0] tm352;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [12:0] tm353;
   wire signed [12:0] tm354;
   wire signed [12:0] tm355;
   wire signed [12:0] tm356;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [12:0] tm365;
   wire signed [12:0] tm366;
   wire signed [12:0] tm367;
   wire signed [12:0] tm368;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [12:0] tm369;
   wire signed [12:0] tm370;
   wire signed [12:0] tm371;
   wire signed [12:0] tm372;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   wire signed [11:0] t938;
   wire signed [11:0] t939;
   wire signed [11:0] t940;
   wire signed [11:0] t941;
   wire signed [11:0] t942;
   wire signed [11:0] t943;
   wire signed [11:0] t944;
   wire signed [11:0] t945;
   wire signed [11:0] t954;
   wire signed [11:0] t955;
   wire signed [11:0] t956;
   wire signed [11:0] t957;
   wire signed [11:0] t958;
   wire signed [11:0] t959;
   wire signed [11:0] t960;
   wire signed [11:0] t961;


   assign a754 = X0;
   assign a755 = X4;
   assign a756 = X1;
   assign a757 = X5;
   assign a762 = X2;
   assign a763 = X6;
   assign a764 = X3;
   assign a765 = X7;
   assign a770 = X8;
   assign a771 = X12;
   assign a772 = X9;
   assign a773 = X13;
   assign a778 = X10;
   assign a779 = X14;
   assign a780 = X11;
   assign a781 = X15;
   assign t930 = tm341[12:1];
   assign t931 = tm342[12:1];
   assign t932 = tm343[12:1];
   assign t933 = tm344[12:1];
   assign t934 = tm345[12:1];
   assign t935 = tm346[12:1];
   assign t936 = tm347[12:1];
   assign t937 = tm348[12:1];
   assign t946 = tm357[12:1];
   assign t947 = tm358[12:1];
   assign t948 = tm359[12:1];
   assign t949 = tm360[12:1];
   assign t950 = tm361[12:1];
   assign t951 = tm362[12:1];
   assign t952 = tm363[12:1];
   assign t953 = tm364[12:1];
   assign Y0 = t938;
   assign Y1 = t939;
   assign Y4 = t940;
   assign Y5 = t941;
   assign Y2 = t942;
   assign Y3 = t943;
   assign Y6 = t944;
   assign Y7 = t945;
   assign Y8 = t954;
   assign Y9 = t955;
   assign Y12 = t956;
   assign Y13 = t957;
   assign Y10 = t958;
   assign Y11 = t959;
   assign Y14 = t960;
   assign Y15 = t961;
   assign t938 = tm349[12:1];
   assign t939 = tm350[12:1];
   assign t940 = tm351[12:1];
   assign t941 = tm352[12:1];
   assign t942 = tm353[12:1];
   assign t943 = tm354[12:1];
   assign t944 = tm355[12:1];
   assign t945 = tm356[12:1];
   assign t954 = tm365[12:1];
   assign t955 = tm366[12:1];
   assign t956 = tm367[12:1];
   assign t957 = tm368[12:1];
   assign t958 = tm369[12:1];
   assign t959 = tm370[12:1];
   assign t960 = tm371[12:1];
   assign t961 = tm372[12:1];

    addfxp #(13, 1) add15560(.a({{1{a754[11]}}, a754}), .b({{1{a755[11]}}, a755}), .clk(clk), .q(tm341));    // 0
    addfxp #(13, 1) add15575(.a({{1{a756[11]}}, a756}), .b({{1{a757[11]}}, a757}), .clk(clk), .q(tm342));    // 0
    subfxp #(13, 1) sub15589(.a({{1{a754[11]}}, a754}), .b({{1{a755[11]}}, a755}), .clk(clk), .q(tm343));    // 0
    subfxp #(13, 1) sub15603(.a({{1{a756[11]}}, a756}), .b({{1{a757[11]}}, a757}), .clk(clk), .q(tm344));    // 0
    addfxp #(13, 1) add15618(.a({{1{a762[11]}}, a762}), .b({{1{a763[11]}}, a763}), .clk(clk), .q(tm345));    // 0
    addfxp #(13, 1) add15633(.a({{1{a764[11]}}, a764}), .b({{1{a765[11]}}, a765}), .clk(clk), .q(tm346));    // 0
    subfxp #(13, 1) sub15647(.a({{1{a762[11]}}, a762}), .b({{1{a763[11]}}, a763}), .clk(clk), .q(tm347));    // 0
    subfxp #(13, 1) sub15661(.a({{1{a764[11]}}, a764}), .b({{1{a765[11]}}, a765}), .clk(clk), .q(tm348));    // 0
    addfxp #(13, 1) add15760(.a({{1{a770[11]}}, a770}), .b({{1{a771[11]}}, a771}), .clk(clk), .q(tm357));    // 0
    addfxp #(13, 1) add15775(.a({{1{a772[11]}}, a772}), .b({{1{a773[11]}}, a773}), .clk(clk), .q(tm358));    // 0
    subfxp #(13, 1) sub15789(.a({{1{a770[11]}}, a770}), .b({{1{a771[11]}}, a771}), .clk(clk), .q(tm359));    // 0
    subfxp #(13, 1) sub15803(.a({{1{a772[11]}}, a772}), .b({{1{a773[11]}}, a773}), .clk(clk), .q(tm360));    // 0
    addfxp #(13, 1) add15818(.a({{1{a778[11]}}, a778}), .b({{1{a779[11]}}, a779}), .clk(clk), .q(tm361));    // 0
    addfxp #(13, 1) add15833(.a({{1{a780[11]}}, a780}), .b({{1{a781[11]}}, a781}), .clk(clk), .q(tm362));    // 0
    subfxp #(13, 1) sub15847(.a({{1{a778[11]}}, a778}), .b({{1{a779[11]}}, a779}), .clk(clk), .q(tm363));    // 0
    subfxp #(13, 1) sub15861(.a({{1{a780[11]}}, a780}), .b({{1{a781[11]}}, a781}), .clk(clk), .q(tm364));    // 0
    addfxp #(13, 1) add15668(.a({{1{t930[11]}}, t930}), .b({{1{t934[11]}}, t934}), .clk(clk), .q(tm349));    // 1
    addfxp #(13, 1) add15675(.a({{1{t931[11]}}, t931}), .b({{1{t935[11]}}, t935}), .clk(clk), .q(tm350));    // 1
    subfxp #(13, 1) sub15681(.a({{1{t930[11]}}, t930}), .b({{1{t934[11]}}, t934}), .clk(clk), .q(tm351));    // 1
    subfxp #(13, 1) sub15687(.a({{1{t931[11]}}, t931}), .b({{1{t935[11]}}, t935}), .clk(clk), .q(tm352));    // 1
    addfxp #(13, 1) add15710(.a({{1{t932[11]}}, t932}), .b({{1{t937[11]}}, t937}), .clk(clk), .q(tm353));    // 1
    subfxp #(13, 1) sub15716(.a({{1{t933[11]}}, t933}), .b({{1{t936[11]}}, t936}), .clk(clk), .q(tm354));    // 1
    subfxp #(13, 1) sub15722(.a({{1{t932[11]}}, t932}), .b({{1{t937[11]}}, t937}), .clk(clk), .q(tm355));    // 1
    addfxp #(13, 1) add15729(.a({{1{t933[11]}}, t933}), .b({{1{t936[11]}}, t936}), .clk(clk), .q(tm356));    // 1
    addfxp #(13, 1) add15868(.a({{1{t946[11]}}, t946}), .b({{1{t950[11]}}, t950}), .clk(clk), .q(tm365));    // 1
    addfxp #(13, 1) add15875(.a({{1{t947[11]}}, t947}), .b({{1{t951[11]}}, t951}), .clk(clk), .q(tm366));    // 1
    subfxp #(13, 1) sub15881(.a({{1{t946[11]}}, t946}), .b({{1{t950[11]}}, t950}), .clk(clk), .q(tm367));    // 1
    subfxp #(13, 1) sub15887(.a({{1{t947[11]}}, t947}), .b({{1{t951[11]}}, t951}), .clk(clk), .q(tm368));    // 1
    addfxp #(13, 1) add15910(.a({{1{t948[11]}}, t948}), .b({{1{t953[11]}}, t953}), .clk(clk), .q(tm369));    // 1
    subfxp #(13, 1) sub15916(.a({{1{t949[11]}}, t949}), .b({{1{t952[11]}}, t952}), .clk(clk), .q(tm370));    // 1
    subfxp #(13, 1) sub15922(.a({{1{t948[11]}}, t948}), .b({{1{t953[11]}}, t953}), .clk(clk), .q(tm371));    // 1
    addfxp #(13, 1) add15929(.a({{1{t949[11]}}, t949}), .b({{1{t952[11]}}, t952}), .clk(clk), .q(tm372));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 11
// Gap: 8
module rc15953(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm15951 instPerm25054(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 11
// Gap: 8
module perm15951(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[4] ^ addr0[0];
   assign inBank0[1] = addr0[5] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[0];
   assign inAddr0[2] = addr0[1];
   assign outBank0[0] = addr0b[4] ^ addr0b[0];
   assign outBank0[1] = addr0b[5] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outBank_a0[0] = addr0c[4] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[5] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];

   assign inBank1[0] = addr1[4] ^ addr1[0];
   assign inBank1[1] = addr1[5] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[0];
   assign inAddr1[2] = addr1[1];
   assign outBank1[0] = addr1b[4] ^ addr1b[0];
   assign outBank1[1] = addr1b[5] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outBank_a1[0] = addr1c[4] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[5] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];

   assign inBank2[0] = addr2[4] ^ addr2[0];
   assign inBank2[1] = addr2[5] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[0];
   assign inAddr2[2] = addr2[1];
   assign outBank2[0] = addr2b[4] ^ addr2b[0];
   assign outBank2[1] = addr2b[5] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outBank_a2[0] = addr2c[4] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[5] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];

   assign inBank3[0] = addr3[4] ^ addr3[0];
   assign inBank3[1] = addr3[5] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[0];
   assign inAddr3[2] = addr3[1];
   assign outBank3[0] = addr3b[4] ^ addr3b[0];
   assign outBank3[1] = addr3b[5] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outBank_a3[0] = addr3c[4] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[5] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];

   assign inBank4[0] = addr4[4] ^ addr4[0];
   assign inBank4[1] = addr4[5] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[0];
   assign inAddr4[2] = addr4[1];
   assign outBank4[0] = addr4b[4] ^ addr4b[0];
   assign outBank4[1] = addr4b[5] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outBank_a4[0] = addr4c[4] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[5] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];

   assign inBank5[0] = addr5[4] ^ addr5[0];
   assign inBank5[1] = addr5[5] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[0];
   assign inAddr5[2] = addr5[1];
   assign outBank5[0] = addr5b[4] ^ addr5b[0];
   assign outBank5[1] = addr5b[5] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outBank_a5[0] = addr5c[4] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[5] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];

   assign inBank6[0] = addr6[4] ^ addr6[0];
   assign inBank6[1] = addr6[5] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[0];
   assign inAddr6[2] = addr6[1];
   assign outBank6[0] = addr6b[4] ^ addr6b[0];
   assign outBank6[1] = addr6b[5] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outBank_a6[0] = addr6c[4] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[5] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];

   assign inBank7[0] = addr7[4] ^ addr7[0];
   assign inBank7[1] = addr7[5] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[0];
   assign inAddr7[2] = addr7[1];
   assign outBank7[0] = addr7b[4] ^ addr7b[0];
   assign outBank7[1] = addr7b[5] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outBank_a7[0] = addr7c[4] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[5] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];

   shiftRegFIFO #(7, 1) shiftFIFO_25057(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_25060(.X(next0), .Y(next_out), .clk(clk));


   memArray64_15951 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

    reg resetOutCountRd2_8;
    reg resetOutCountRd2_9;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_8 <= 0;
            resetOutCountRd2_9 <= 0;
        end
        else begin
            resetOutCountRd2_8 <= (inCount == 7) ? 1'b1 : 1'b0;
            resetOutCountRd2_9 <= resetOutCountRd2_8;
            if (resetOutCountRd2_9 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 6)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 6) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 7) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 6)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[2];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[1];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[2];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[1];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray64_15951(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(8, 1) shiftFIFO_25063(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 8
module DirSum_16734(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i3;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 7)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock15956 codeBlockIsnt25064(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D48(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hf38;
      2: out3 <= 12'he78;
      3: out3 <= 12'hdc7;
      4: out3 <= 12'hd2c;
      5: out3 <= 12'hcad;
      6: out3 <= 12'hc4e;
      7: out3 <= 12'hc14;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D40(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3ec;
      2: out3 <= 12'h3b2;
      3: out3 <= 12'h353;
      4: out3 <= 12'h2d4;
      5: out3 <= 12'h239;
      6: out3 <= 12'h188;
      7: out3 <= 12'hc8;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D41(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3b2;
      2: out3 <= 12'h2d4;
      3: out3 <= 12'h188;
      4: out3 <= 12'h0;
      5: out3 <= 12'he78;
      6: out3 <= 12'hd2c;
      7: out3 <= 12'hc4e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D42(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h353;
      2: out3 <= 12'h188;
      3: out3 <= 12'hf38;
      4: out3 <= 12'hd2c;
      5: out3 <= 12'hc14;
      6: out3 <= 12'hc4e;
      7: out3 <= 12'hdc7;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D54(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hed7;
      1: out3 <= 12'hce8;
      2: out3 <= 12'hc05;
      3: out3 <= 12'hc79;
      4: out3 <= 12'he1d;
      5: out3 <= 12'h64;
      6: out3 <= 12'h28a;
      7: out3 <= 12'h3d4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D53(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hf38;
      1: out3 <= 12'hdc7;
      2: out3 <= 12'hcad;
      3: out3 <= 12'hc14;
      4: out3 <= 12'hc14;
      5: out3 <= 12'hcad;
      6: out3 <= 12'hdc7;
      7: out3 <= 12'hf38;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D44(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3fb;
      1: out3 <= 12'h3d4;
      2: out3 <= 12'h387;
      3: out3 <= 12'h318;
      4: out3 <= 12'h28a;
      5: out3 <= 12'h1e3;
      6: out3 <= 12'h129;
      7: out3 <= 12'h64;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D52(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hf9c;
      1: out3 <= 12'hed7;
      2: out3 <= 12'he1d;
      3: out3 <= 12'hd76;
      4: out3 <= 12'hce8;
      5: out3 <= 12'hc79;
      6: out3 <= 12'hc2c;
      7: out3 <= 12'hc05;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D45(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3ec;
      1: out3 <= 12'h353;
      2: out3 <= 12'h239;
      3: out3 <= 12'hc8;
      4: out3 <= 12'hf38;
      5: out3 <= 12'hdc7;
      6: out3 <= 12'hcad;
      7: out3 <= 12'hc14;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D46(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3d4;
      1: out3 <= 12'h28a;
      2: out3 <= 12'h64;
      3: out3 <= 12'he1d;
      4: out3 <= 12'hc79;
      5: out3 <= 12'hc05;
      6: out3 <= 12'hce8;
      7: out3 <= 12'hed7;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D50(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hdc7;
      2: out3 <= 12'hc4e;
      3: out3 <= 12'hc14;
      4: out3 <= 12'hd2c;
      5: out3 <= 12'hf38;
      6: out3 <= 12'h188;
      7: out3 <= 12'h353;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D49(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'he78;
      2: out3 <= 12'hd2c;
      3: out3 <= 12'hc4e;
      4: out3 <= 12'hc00;
      5: out3 <= 12'hc4e;
      6: out3 <= 12'hd2c;
      7: out3 <= 12'he78;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock15956(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i3_in;
   reg [2:0] i3;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_25067(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a690;
   wire signed [11:0] a643;
   wire signed [11:0] a693;
   wire signed [11:0] a647;
   wire signed [11:0] a694;
   wire signed [11:0] a695;
   wire signed [11:0] a698;
   wire signed [11:0] a699;
   wire signed [11:0] a702;
   wire signed [11:0] a703;
   wire signed [11:0] a706;
   wire signed [11:0] a667;
   wire signed [11:0] a709;
   wire signed [11:0] a671;
   wire signed [11:0] a710;
   wire signed [11:0] a711;
   wire signed [11:0] a714;
   wire signed [11:0] a715;
   wire signed [11:0] a718;
   wire signed [11:0] a719;
   reg signed [11:0] tm593;
   reg signed [11:0] tm597;
   reg signed [11:0] tm609;
   reg signed [11:0] tm613;
   reg signed [11:0] tm625;
   reg signed [11:0] tm629;
   reg signed [11:0] tm641;
   reg signed [11:0] tm645;
   reg signed [11:0] tm657;
   reg signed [11:0] tm661;
   reg signed [11:0] tm673;
   reg signed [11:0] tm677;
   reg signed [11:0] tm689;
   reg signed [11:0] tm696;
   reg signed [11:0] tm703;
   reg signed [11:0] tm710;
   reg signed [11:0] tm594;
   reg signed [11:0] tm598;
   reg signed [11:0] tm610;
   reg signed [11:0] tm614;
   reg signed [11:0] tm626;
   reg signed [11:0] tm630;
   reg signed [11:0] tm642;
   reg signed [11:0] tm646;
   reg signed [11:0] tm658;
   reg signed [11:0] tm662;
   reg signed [11:0] tm674;
   reg signed [11:0] tm678;
   reg signed [11:0] tm690;
   reg signed [11:0] tm697;
   reg signed [11:0] tm704;
   reg signed [11:0] tm711;
   wire signed [11:0] tm18;
   wire signed [11:0] a648;
   wire signed [11:0] tm19;
   wire signed [11:0] a650;
   wire signed [11:0] tm20;
   wire signed [11:0] a654;
   wire signed [11:0] tm21;
   wire signed [11:0] a656;
   wire signed [11:0] tm22;
   wire signed [11:0] a660;
   wire signed [11:0] tm23;
   wire signed [11:0] a662;
   wire signed [11:0] tm26;
   wire signed [11:0] a672;
   wire signed [11:0] tm27;
   wire signed [11:0] a674;
   wire signed [11:0] tm28;
   wire signed [11:0] a678;
   wire signed [11:0] tm29;
   wire signed [11:0] a680;
   wire signed [11:0] tm30;
   wire signed [11:0] a684;
   wire signed [11:0] tm31;
   wire signed [11:0] a686;
   reg signed [11:0] tm595;
   reg signed [11:0] tm599;
   reg signed [11:0] tm611;
   reg signed [11:0] tm615;
   reg signed [11:0] tm627;
   reg signed [11:0] tm631;
   reg signed [11:0] tm643;
   reg signed [11:0] tm647;
   reg signed [11:0] tm659;
   reg signed [11:0] tm663;
   reg signed [11:0] tm675;
   reg signed [11:0] tm679;
   reg signed [11:0] tm691;
   reg signed [11:0] tm698;
   reg signed [11:0] tm705;
   reg signed [11:0] tm712;
   reg signed [11:0] tm100;
   reg signed [11:0] tm101;
   reg signed [11:0] tm104;
   reg signed [11:0] tm105;
   reg signed [11:0] tm108;
   reg signed [11:0] tm109;
   reg signed [11:0] tm116;
   reg signed [11:0] tm117;
   reg signed [11:0] tm120;
   reg signed [11:0] tm121;
   reg signed [11:0] tm124;
   reg signed [11:0] tm125;
   reg signed [11:0] tm596;
   reg signed [11:0] tm600;
   reg signed [11:0] tm612;
   reg signed [11:0] tm616;
   reg signed [11:0] tm628;
   reg signed [11:0] tm632;
   reg signed [11:0] tm644;
   reg signed [11:0] tm648;
   reg signed [11:0] tm660;
   reg signed [11:0] tm664;
   reg signed [11:0] tm676;
   reg signed [11:0] tm680;
   reg signed [11:0] tm692;
   reg signed [11:0] tm699;
   reg signed [11:0] tm706;
   reg signed [11:0] tm713;
   reg signed [11:0] tm693;
   reg signed [11:0] tm700;
   reg signed [11:0] tm707;
   reg signed [11:0] tm714;
   wire signed [11:0] a649;
   wire signed [11:0] a651;
   wire signed [11:0] a652;
   wire signed [11:0] a653;
   wire signed [11:0] a655;
   wire signed [11:0] a657;
   wire signed [11:0] a658;
   wire signed [11:0] a659;
   wire signed [11:0] a661;
   wire signed [11:0] a663;
   wire signed [11:0] a664;
   wire signed [11:0] a665;
   wire signed [11:0] a673;
   wire signed [11:0] a675;
   wire signed [11:0] a676;
   wire signed [11:0] a677;
   wire signed [11:0] a679;
   wire signed [11:0] a681;
   wire signed [11:0] a682;
   wire signed [11:0] a683;
   wire signed [11:0] a685;
   wire signed [11:0] a687;
   wire signed [11:0] a688;
   wire signed [11:0] a689;
   reg signed [11:0] tm694;
   reg signed [11:0] tm701;
   reg signed [11:0] tm708;
   reg signed [11:0] tm715;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   reg signed [11:0] tm695;
   reg signed [11:0] tm702;
   reg signed [11:0] tm709;
   reg signed [11:0] tm716;


   assign a690 = X0;
   assign a643 = a690;
   assign a693 = X1;
   assign a647 = a693;
   assign a694 = X2;
   assign a695 = X3;
   assign a698 = X4;
   assign a699 = X5;
   assign a702 = X6;
   assign a703 = X7;
   assign a706 = X8;
   assign a667 = a706;
   assign a709 = X9;
   assign a671 = a709;
   assign a710 = X10;
   assign a711 = X11;
   assign a714 = X12;
   assign a715 = X13;
   assign a718 = X14;
   assign a719 = X15;
   assign a648 = tm18;
   assign a650 = tm19;
   assign a654 = tm20;
   assign a656 = tm21;
   assign a660 = tm22;
   assign a662 = tm23;
   assign a672 = tm26;
   assign a674 = tm27;
   assign a678 = tm28;
   assign a680 = tm29;
   assign a684 = tm30;
   assign a686 = tm31;
   assign Y0 = tm695;
   assign Y1 = tm702;
   assign Y8 = tm709;
   assign Y9 = tm716;

   D48 instD48inst0(.addr(i3[2:0]), .out(tm19), .clk(clk));

   D40 instD40inst0(.addr(i3[2:0]), .out(tm18), .clk(clk));

   D41 instD41inst0(.addr(i3[2:0]), .out(tm20), .clk(clk));

   D42 instD42inst0(.addr(i3[2:0]), .out(tm22), .clk(clk));

   D54 instD54inst0(.addr(i3[2:0]), .out(tm31), .clk(clk));

   D53 instD53inst0(.addr(i3[2:0]), .out(tm29), .clk(clk));

   D44 instD44inst0(.addr(i3[2:0]), .out(tm26), .clk(clk));

   D52 instD52inst0(.addr(i3[2:0]), .out(tm27), .clk(clk));

   D45 instD45inst0(.addr(i3[2:0]), .out(tm28), .clk(clk));

   D46 instD46inst0(.addr(i3[2:0]), .out(tm30), .clk(clk));

   D50 instD50inst0(.addr(i3[2:0]), .out(tm23), .clk(clk));

   D49 instD49inst0(.addr(i3[2:0]), .out(tm21), .clk(clk));

    multfix #(12, 2) m16054(.a(tm100), .b(tm596), .clk(clk), .q_sc(a649), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16076(.a(tm101), .b(tm600), .clk(clk), .q_sc(a651), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16093(.a(tm101), .b(tm596), .clk(clk), .q_sc(a652), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16104(.a(tm100), .b(tm600), .clk(clk), .q_sc(a653), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16133(.a(tm104), .b(tm612), .clk(clk), .q_sc(a655), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16155(.a(tm105), .b(tm616), .clk(clk), .q_sc(a657), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16172(.a(tm105), .b(tm612), .clk(clk), .q_sc(a658), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16183(.a(tm104), .b(tm616), .clk(clk), .q_sc(a659), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16212(.a(tm108), .b(tm628), .clk(clk), .q_sc(a661), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16234(.a(tm109), .b(tm632), .clk(clk), .q_sc(a663), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16251(.a(tm109), .b(tm628), .clk(clk), .q_sc(a664), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16262(.a(tm108), .b(tm632), .clk(clk), .q_sc(a665), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16370(.a(tm116), .b(tm644), .clk(clk), .q_sc(a673), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16392(.a(tm117), .b(tm648), .clk(clk), .q_sc(a675), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16409(.a(tm117), .b(tm644), .clk(clk), .q_sc(a676), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16420(.a(tm116), .b(tm648), .clk(clk), .q_sc(a677), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16449(.a(tm120), .b(tm660), .clk(clk), .q_sc(a679), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16471(.a(tm121), .b(tm664), .clk(clk), .q_sc(a681), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16488(.a(tm121), .b(tm660), .clk(clk), .q_sc(a682), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16499(.a(tm120), .b(tm664), .clk(clk), .q_sc(a683), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16528(.a(tm124), .b(tm676), .clk(clk), .q_sc(a685), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16550(.a(tm125), .b(tm680), .clk(clk), .q_sc(a687), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16567(.a(tm125), .b(tm676), .clk(clk), .q_sc(a688), .q_unsc(), .rst(reset));
    multfix #(12, 2) m16578(.a(tm124), .b(tm680), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    subfxp #(12, 1) sub16082(.a(a649), .b(a651), .clk(clk), .q(Y2));    // 6
    addfxp #(12, 1) add16111(.a(a652), .b(a653), .clk(clk), .q(Y3));    // 6
    subfxp #(12, 1) sub16161(.a(a655), .b(a657), .clk(clk), .q(Y4));    // 6
    addfxp #(12, 1) add16190(.a(a658), .b(a659), .clk(clk), .q(Y5));    // 6
    subfxp #(12, 1) sub16240(.a(a661), .b(a663), .clk(clk), .q(Y6));    // 6
    addfxp #(12, 1) add16269(.a(a664), .b(a665), .clk(clk), .q(Y7));    // 6
    subfxp #(12, 1) sub16398(.a(a673), .b(a675), .clk(clk), .q(Y10));    // 6
    addfxp #(12, 1) add16427(.a(a676), .b(a677), .clk(clk), .q(Y11));    // 6
    subfxp #(12, 1) sub16477(.a(a679), .b(a681), .clk(clk), .q(Y12));    // 6
    addfxp #(12, 1) add16506(.a(a682), .b(a683), .clk(clk), .q(Y13));    // 6
    subfxp #(12, 1) sub16556(.a(a685), .b(a687), .clk(clk), .q(Y14));    // 6
    addfxp #(12, 1) add16585(.a(a688), .b(a689), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm100 <= 0;
         tm596 <= 0;
         tm101 <= 0;
         tm600 <= 0;
         tm101 <= 0;
         tm596 <= 0;
         tm100 <= 0;
         tm600 <= 0;
         tm104 <= 0;
         tm612 <= 0;
         tm105 <= 0;
         tm616 <= 0;
         tm105 <= 0;
         tm612 <= 0;
         tm104 <= 0;
         tm616 <= 0;
         tm108 <= 0;
         tm628 <= 0;
         tm109 <= 0;
         tm632 <= 0;
         tm109 <= 0;
         tm628 <= 0;
         tm108 <= 0;
         tm632 <= 0;
         tm116 <= 0;
         tm644 <= 0;
         tm117 <= 0;
         tm648 <= 0;
         tm117 <= 0;
         tm644 <= 0;
         tm116 <= 0;
         tm648 <= 0;
         tm120 <= 0;
         tm660 <= 0;
         tm121 <= 0;
         tm664 <= 0;
         tm121 <= 0;
         tm660 <= 0;
         tm120 <= 0;
         tm664 <= 0;
         tm124 <= 0;
         tm676 <= 0;
         tm125 <= 0;
         tm680 <= 0;
         tm125 <= 0;
         tm676 <= 0;
         tm124 <= 0;
         tm680 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm593 <= a694;
         tm597 <= a695;
         tm609 <= a698;
         tm613 <= a699;
         tm625 <= a702;
         tm629 <= a703;
         tm641 <= a710;
         tm645 <= a711;
         tm657 <= a714;
         tm661 <= a715;
         tm673 <= a718;
         tm677 <= a719;
         tm689 <= a643;
         tm696 <= a647;
         tm703 <= a667;
         tm710 <= a671;
         tm594 <= tm593;
         tm598 <= tm597;
         tm610 <= tm609;
         tm614 <= tm613;
         tm626 <= tm625;
         tm630 <= tm629;
         tm642 <= tm641;
         tm646 <= tm645;
         tm658 <= tm657;
         tm662 <= tm661;
         tm674 <= tm673;
         tm678 <= tm677;
         tm690 <= tm689;
         tm697 <= tm696;
         tm704 <= tm703;
         tm711 <= tm710;
         tm595 <= tm594;
         tm599 <= tm598;
         tm611 <= tm610;
         tm615 <= tm614;
         tm627 <= tm626;
         tm631 <= tm630;
         tm643 <= tm642;
         tm647 <= tm646;
         tm659 <= tm658;
         tm663 <= tm662;
         tm675 <= tm674;
         tm679 <= tm678;
         tm691 <= tm690;
         tm698 <= tm697;
         tm705 <= tm704;
         tm712 <= tm711;
         tm100 <= a648;
         tm101 <= a650;
         tm104 <= a654;
         tm105 <= a656;
         tm108 <= a660;
         tm109 <= a662;
         tm116 <= a672;
         tm117 <= a674;
         tm120 <= a678;
         tm121 <= a680;
         tm124 <= a684;
         tm125 <= a686;
         tm596 <= tm595;
         tm600 <= tm599;
         tm612 <= tm611;
         tm616 <= tm615;
         tm628 <= tm627;
         tm632 <= tm631;
         tm644 <= tm643;
         tm648 <= tm647;
         tm660 <= tm659;
         tm664 <= tm663;
         tm676 <= tm675;
         tm680 <= tm679;
         tm692 <= tm691;
         tm699 <= tm698;
         tm706 <= tm705;
         tm713 <= tm712;
         tm693 <= tm692;
         tm700 <= tm699;
         tm707 <= tm706;
         tm714 <= tm713;
         tm694 <= tm693;
         tm701 <= tm700;
         tm708 <= tm707;
         tm715 <= tm714;
         tm695 <= tm694;
         tm702 <= tm701;
         tm709 <= tm708;
         tm716 <= tm715;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock16737(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_25070(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a514;
   wire signed [11:0] a515;
   wire signed [11:0] a516;
   wire signed [11:0] a517;
   wire signed [11:0] a522;
   wire signed [11:0] a523;
   wire signed [11:0] a524;
   wire signed [11:0] a525;
   wire signed [11:0] a530;
   wire signed [11:0] a531;
   wire signed [11:0] a532;
   wire signed [11:0] a533;
   wire signed [11:0] a538;
   wire signed [11:0] a539;
   wire signed [11:0] a540;
   wire signed [11:0] a541;
   wire signed [12:0] tm373;
   wire signed [12:0] tm374;
   wire signed [12:0] tm375;
   wire signed [12:0] tm376;
   wire signed [12:0] tm377;
   wire signed [12:0] tm378;
   wire signed [12:0] tm379;
   wire signed [12:0] tm380;
   wire signed [12:0] tm389;
   wire signed [12:0] tm390;
   wire signed [12:0] tm391;
   wire signed [12:0] tm392;
   wire signed [12:0] tm393;
   wire signed [12:0] tm394;
   wire signed [12:0] tm395;
   wire signed [12:0] tm396;
   wire signed [11:0] t690;
   wire signed [11:0] t691;
   wire signed [11:0] t692;
   wire signed [11:0] t693;
   wire signed [11:0] t694;
   wire signed [11:0] t695;
   wire signed [11:0] t696;
   wire signed [11:0] t697;
   wire signed [11:0] t706;
   wire signed [11:0] t707;
   wire signed [11:0] t708;
   wire signed [11:0] t709;
   wire signed [11:0] t710;
   wire signed [11:0] t711;
   wire signed [11:0] t712;
   wire signed [11:0] t713;
   wire signed [12:0] tm381;
   wire signed [12:0] tm382;
   wire signed [12:0] tm383;
   wire signed [12:0] tm384;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [12:0] tm385;
   wire signed [12:0] tm386;
   wire signed [12:0] tm387;
   wire signed [12:0] tm388;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [12:0] tm397;
   wire signed [12:0] tm398;
   wire signed [12:0] tm399;
   wire signed [12:0] tm400;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [12:0] tm401;
   wire signed [12:0] tm402;
   wire signed [12:0] tm403;
   wire signed [12:0] tm404;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   wire signed [11:0] t698;
   wire signed [11:0] t699;
   wire signed [11:0] t700;
   wire signed [11:0] t701;
   wire signed [11:0] t702;
   wire signed [11:0] t703;
   wire signed [11:0] t704;
   wire signed [11:0] t705;
   wire signed [11:0] t714;
   wire signed [11:0] t715;
   wire signed [11:0] t716;
   wire signed [11:0] t717;
   wire signed [11:0] t718;
   wire signed [11:0] t719;
   wire signed [11:0] t720;
   wire signed [11:0] t721;


   assign a514 = X0;
   assign a515 = X4;
   assign a516 = X1;
   assign a517 = X5;
   assign a522 = X2;
   assign a523 = X6;
   assign a524 = X3;
   assign a525 = X7;
   assign a530 = X8;
   assign a531 = X12;
   assign a532 = X9;
   assign a533 = X13;
   assign a538 = X10;
   assign a539 = X14;
   assign a540 = X11;
   assign a541 = X15;
   assign t690 = tm373[12:1];
   assign t691 = tm374[12:1];
   assign t692 = tm375[12:1];
   assign t693 = tm376[12:1];
   assign t694 = tm377[12:1];
   assign t695 = tm378[12:1];
   assign t696 = tm379[12:1];
   assign t697 = tm380[12:1];
   assign t706 = tm389[12:1];
   assign t707 = tm390[12:1];
   assign t708 = tm391[12:1];
   assign t709 = tm392[12:1];
   assign t710 = tm393[12:1];
   assign t711 = tm394[12:1];
   assign t712 = tm395[12:1];
   assign t713 = tm396[12:1];
   assign Y0 = t698;
   assign Y1 = t699;
   assign Y4 = t700;
   assign Y5 = t701;
   assign Y2 = t702;
   assign Y3 = t703;
   assign Y6 = t704;
   assign Y7 = t705;
   assign Y8 = t714;
   assign Y9 = t715;
   assign Y12 = t716;
   assign Y13 = t717;
   assign Y10 = t718;
   assign Y11 = t719;
   assign Y14 = t720;
   assign Y15 = t721;
   assign t698 = tm381[12:1];
   assign t699 = tm382[12:1];
   assign t700 = tm383[12:1];
   assign t701 = tm384[12:1];
   assign t702 = tm385[12:1];
   assign t703 = tm386[12:1];
   assign t704 = tm387[12:1];
   assign t705 = tm388[12:1];
   assign t714 = tm397[12:1];
   assign t715 = tm398[12:1];
   assign t716 = tm399[12:1];
   assign t717 = tm400[12:1];
   assign t718 = tm401[12:1];
   assign t719 = tm402[12:1];
   assign t720 = tm403[12:1];
   assign t721 = tm404[12:1];

    addfxp #(13, 1) add16749(.a({{1{a514[11]}}, a514}), .b({{1{a515[11]}}, a515}), .clk(clk), .q(tm373));    // 0
    addfxp #(13, 1) add16764(.a({{1{a516[11]}}, a516}), .b({{1{a517[11]}}, a517}), .clk(clk), .q(tm374));    // 0
    subfxp #(13, 1) sub16778(.a({{1{a514[11]}}, a514}), .b({{1{a515[11]}}, a515}), .clk(clk), .q(tm375));    // 0
    subfxp #(13, 1) sub16792(.a({{1{a516[11]}}, a516}), .b({{1{a517[11]}}, a517}), .clk(clk), .q(tm376));    // 0
    addfxp #(13, 1) add16807(.a({{1{a522[11]}}, a522}), .b({{1{a523[11]}}, a523}), .clk(clk), .q(tm377));    // 0
    addfxp #(13, 1) add16822(.a({{1{a524[11]}}, a524}), .b({{1{a525[11]}}, a525}), .clk(clk), .q(tm378));    // 0
    subfxp #(13, 1) sub16836(.a({{1{a522[11]}}, a522}), .b({{1{a523[11]}}, a523}), .clk(clk), .q(tm379));    // 0
    subfxp #(13, 1) sub16850(.a({{1{a524[11]}}, a524}), .b({{1{a525[11]}}, a525}), .clk(clk), .q(tm380));    // 0
    addfxp #(13, 1) add16949(.a({{1{a530[11]}}, a530}), .b({{1{a531[11]}}, a531}), .clk(clk), .q(tm389));    // 0
    addfxp #(13, 1) add16964(.a({{1{a532[11]}}, a532}), .b({{1{a533[11]}}, a533}), .clk(clk), .q(tm390));    // 0
    subfxp #(13, 1) sub16978(.a({{1{a530[11]}}, a530}), .b({{1{a531[11]}}, a531}), .clk(clk), .q(tm391));    // 0
    subfxp #(13, 1) sub16992(.a({{1{a532[11]}}, a532}), .b({{1{a533[11]}}, a533}), .clk(clk), .q(tm392));    // 0
    addfxp #(13, 1) add17007(.a({{1{a538[11]}}, a538}), .b({{1{a539[11]}}, a539}), .clk(clk), .q(tm393));    // 0
    addfxp #(13, 1) add17022(.a({{1{a540[11]}}, a540}), .b({{1{a541[11]}}, a541}), .clk(clk), .q(tm394));    // 0
    subfxp #(13, 1) sub17036(.a({{1{a538[11]}}, a538}), .b({{1{a539[11]}}, a539}), .clk(clk), .q(tm395));    // 0
    subfxp #(13, 1) sub17050(.a({{1{a540[11]}}, a540}), .b({{1{a541[11]}}, a541}), .clk(clk), .q(tm396));    // 0
    addfxp #(13, 1) add16857(.a({{1{t690[11]}}, t690}), .b({{1{t694[11]}}, t694}), .clk(clk), .q(tm381));    // 1
    addfxp #(13, 1) add16864(.a({{1{t691[11]}}, t691}), .b({{1{t695[11]}}, t695}), .clk(clk), .q(tm382));    // 1
    subfxp #(13, 1) sub16870(.a({{1{t690[11]}}, t690}), .b({{1{t694[11]}}, t694}), .clk(clk), .q(tm383));    // 1
    subfxp #(13, 1) sub16876(.a({{1{t691[11]}}, t691}), .b({{1{t695[11]}}, t695}), .clk(clk), .q(tm384));    // 1
    addfxp #(13, 1) add16899(.a({{1{t692[11]}}, t692}), .b({{1{t697[11]}}, t697}), .clk(clk), .q(tm385));    // 1
    subfxp #(13, 1) sub16905(.a({{1{t693[11]}}, t693}), .b({{1{t696[11]}}, t696}), .clk(clk), .q(tm386));    // 1
    subfxp #(13, 1) sub16911(.a({{1{t692[11]}}, t692}), .b({{1{t697[11]}}, t697}), .clk(clk), .q(tm387));    // 1
    addfxp #(13, 1) add16918(.a({{1{t693[11]}}, t693}), .b({{1{t696[11]}}, t696}), .clk(clk), .q(tm388));    // 1
    addfxp #(13, 1) add17057(.a({{1{t706[11]}}, t706}), .b({{1{t710[11]}}, t710}), .clk(clk), .q(tm397));    // 1
    addfxp #(13, 1) add17064(.a({{1{t707[11]}}, t707}), .b({{1{t711[11]}}, t711}), .clk(clk), .q(tm398));    // 1
    subfxp #(13, 1) sub17070(.a({{1{t706[11]}}, t706}), .b({{1{t710[11]}}, t710}), .clk(clk), .q(tm399));    // 1
    subfxp #(13, 1) sub17076(.a({{1{t707[11]}}, t707}), .b({{1{t711[11]}}, t711}), .clk(clk), .q(tm400));    // 1
    addfxp #(13, 1) add17099(.a({{1{t708[11]}}, t708}), .b({{1{t713[11]}}, t713}), .clk(clk), .q(tm401));    // 1
    subfxp #(13, 1) sub17105(.a({{1{t709[11]}}, t709}), .b({{1{t712[11]}}, t712}), .clk(clk), .q(tm402));    // 1
    subfxp #(13, 1) sub17111(.a({{1{t708[11]}}, t708}), .b({{1{t713[11]}}, t713}), .clk(clk), .q(tm403));    // 1
    addfxp #(13, 1) add17118(.a({{1{t709[11]}}, t709}), .b({{1{t712[11]}}, t712}), .clk(clk), .q(tm404));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 29
// Gap: 32
module rc17142(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm17140 instPerm25071(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 29
// Gap: 32
module perm17140(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];

   nextReg #(25, 5) nextReg_25076(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_25079(.X(next0), .Y(next_out), .clk(clk));


   memArray256_17140 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 24)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 27)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 24) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 24)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[4];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[3];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[3];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[3];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray256_17140(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(32, 5) nextReg_25084(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 32
module DirSum_18307(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [4:0] i2;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 31)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock17145 codeBlockIsnt25089(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D24(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3f5;
      2: out3 <= 12'h3d4;
      3: out3 <= 12'h39e;
      4: out3 <= 12'h353;
      5: out3 <= 12'h2f7;
      6: out3 <= 12'h28a;
      7: out3 <= 12'h20e;
      8: out3 <= 12'h188;
      9: out3 <= 12'hf9;
      10: out3 <= 12'h64;
      11: out3 <= 12'hfce;
      12: out3 <= 12'hf38;
      13: out3 <= 12'hea7;
      14: out3 <= 12'he1d;
      15: out3 <= 12'hd9e;
      16: out3 <= 12'hd2c;
      17: out3 <= 12'hcca;
      18: out3 <= 12'hc79;
      19: out3 <= 12'hc3c;
      20: out3 <= 12'hc14;
      21: out3 <= 12'hc01;
      22: out3 <= 12'hc05;
      23: out3 <= 12'hc1f;
      24: out3 <= 12'hc4e;
      25: out3 <= 12'hc92;
      26: out3 <= 12'hce8;
      27: out3 <= 12'hd50;
      28: out3 <= 12'hdc7;
      29: out3 <= 12'he4a;
      30: out3 <= 12'hed7;
      31: out3 <= 12'hf6a;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D23(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3fb;
      2: out3 <= 12'h3ec;
      3: out3 <= 12'h3d4;
      4: out3 <= 12'h3b2;
      5: out3 <= 12'h387;
      6: out3 <= 12'h353;
      7: out3 <= 12'h318;
      8: out3 <= 12'h2d4;
      9: out3 <= 12'h28a;
      10: out3 <= 12'h239;
      11: out3 <= 12'h1e3;
      12: out3 <= 12'h188;
      13: out3 <= 12'h129;
      14: out3 <= 12'hc8;
      15: out3 <= 12'h64;
      16: out3 <= 12'h0;
      17: out3 <= 12'hf9c;
      18: out3 <= 12'hf38;
      19: out3 <= 12'hed7;
      20: out3 <= 12'he78;
      21: out3 <= 12'he1d;
      22: out3 <= 12'hdc7;
      23: out3 <= 12'hd76;
      24: out3 <= 12'hd2c;
      25: out3 <= 12'hce8;
      26: out3 <= 12'hcad;
      27: out3 <= 12'hc79;
      28: out3 <= 12'hc4e;
      29: out3 <= 12'hc2c;
      30: out3 <= 12'hc14;
      31: out3 <= 12'hc05;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D26(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3fd;
      2: out3 <= 12'h3f8;
      3: out3 <= 12'h3f1;
      4: out3 <= 12'h3e7;
      5: out3 <= 12'h3db;
      6: out3 <= 12'h3cc;
      7: out3 <= 12'h3bb;
      8: out3 <= 12'h3a8;
      9: out3 <= 12'h393;
      10: out3 <= 12'h37b;
      11: out3 <= 12'h361;
      12: out3 <= 12'h345;
      13: out3 <= 12'h327;
      14: out3 <= 12'h307;
      15: out3 <= 12'h2e6;
      16: out3 <= 12'h2c2;
      17: out3 <= 12'h29d;
      18: out3 <= 12'h276;
      19: out3 <= 12'h24e;
      20: out3 <= 12'h224;
      21: out3 <= 12'h1f9;
      22: out3 <= 12'h1cc;
      23: out3 <= 12'h19f;
      24: out3 <= 12'h171;
      25: out3 <= 12'h141;
      26: out3 <= 12'h111;
      27: out3 <= 12'he0;
      28: out3 <= 12'haf;
      29: out3 <= 12'h7d;
      30: out3 <= 12'h4b;
      31: out3 <= 12'h19;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D22(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3ff;
      2: out3 <= 12'h3fb;
      3: out3 <= 12'h3f5;
      4: out3 <= 12'h3ec;
      5: out3 <= 12'h3e1;
      6: out3 <= 12'h3d4;
      7: out3 <= 12'h3c4;
      8: out3 <= 12'h3b2;
      9: out3 <= 12'h39e;
      10: out3 <= 12'h387;
      11: out3 <= 12'h36e;
      12: out3 <= 12'h353;
      13: out3 <= 12'h336;
      14: out3 <= 12'h318;
      15: out3 <= 12'h2f7;
      16: out3 <= 12'h2d4;
      17: out3 <= 12'h2b0;
      18: out3 <= 12'h28a;
      19: out3 <= 12'h262;
      20: out3 <= 12'h239;
      21: out3 <= 12'h20e;
      22: out3 <= 12'h1e3;
      23: out3 <= 12'h1b6;
      24: out3 <= 12'h188;
      25: out3 <= 12'h159;
      26: out3 <= 12'h129;
      27: out3 <= 12'hf9;
      28: out3 <= 12'hc8;
      29: out3 <= 12'h96;
      30: out3 <= 12'h64;
      31: out3 <= 12'h32;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D27(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3ff;
      1: out3 <= 12'h3f5;
      2: out3 <= 12'h3e1;
      3: out3 <= 12'h3c4;
      4: out3 <= 12'h39e;
      5: out3 <= 12'h36e;
      6: out3 <= 12'h336;
      7: out3 <= 12'h2f7;
      8: out3 <= 12'h2b0;
      9: out3 <= 12'h262;
      10: out3 <= 12'h20e;
      11: out3 <= 12'h1b6;
      12: out3 <= 12'h159;
      13: out3 <= 12'hf9;
      14: out3 <= 12'h96;
      15: out3 <= 12'h32;
      16: out3 <= 12'hfce;
      17: out3 <= 12'hf6a;
      18: out3 <= 12'hf07;
      19: out3 <= 12'hea7;
      20: out3 <= 12'he4a;
      21: out3 <= 12'hdf2;
      22: out3 <= 12'hd9e;
      23: out3 <= 12'hd50;
      24: out3 <= 12'hd09;
      25: out3 <= 12'hcca;
      26: out3 <= 12'hc92;
      27: out3 <= 12'hc62;
      28: out3 <= 12'hc3c;
      29: out3 <= 12'hc1f;
      30: out3 <= 12'hc0b;
      31: out3 <= 12'hc01;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D28(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h3fd;
      1: out3 <= 12'h3e7;
      2: out3 <= 12'h3bb;
      3: out3 <= 12'h37b;
      4: out3 <= 12'h327;
      5: out3 <= 12'h2c2;
      6: out3 <= 12'h24e;
      7: out3 <= 12'h1cc;
      8: out3 <= 12'h141;
      9: out3 <= 12'haf;
      10: out3 <= 12'h19;
      11: out3 <= 12'hf83;
      12: out3 <= 12'heef;
      13: out3 <= 12'he61;
      14: out3 <= 12'hddc;
      15: out3 <= 12'hd63;
      16: out3 <= 12'hcf9;
      17: out3 <= 12'hc9f;
      18: out3 <= 12'hc58;
      19: out3 <= 12'hc25;
      20: out3 <= 12'hc08;
      21: out3 <= 12'hc00;
      22: out3 <= 12'hc0f;
      23: out3 <= 12'hc34;
      24: out3 <= 12'hc6d;
      25: out3 <= 12'hcbb;
      26: out3 <= 12'hd1a;
      27: out3 <= 12'hd8a;
      28: out3 <= 12'he07;
      29: out3 <= 12'he8f;
      30: out3 <= 12'hf20;
      31: out3 <= 12'hfb5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D30(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hfce;
      2: out3 <= 12'hf9c;
      3: out3 <= 12'hf6a;
      4: out3 <= 12'hf38;
      5: out3 <= 12'hf07;
      6: out3 <= 12'hed7;
      7: out3 <= 12'hea7;
      8: out3 <= 12'he78;
      9: out3 <= 12'he4a;
      10: out3 <= 12'he1d;
      11: out3 <= 12'hdf2;
      12: out3 <= 12'hdc7;
      13: out3 <= 12'hd9e;
      14: out3 <= 12'hd76;
      15: out3 <= 12'hd50;
      16: out3 <= 12'hd2c;
      17: out3 <= 12'hd09;
      18: out3 <= 12'hce8;
      19: out3 <= 12'hcca;
      20: out3 <= 12'hcad;
      21: out3 <= 12'hc92;
      22: out3 <= 12'hc79;
      23: out3 <= 12'hc62;
      24: out3 <= 12'hc4e;
      25: out3 <= 12'hc3c;
      26: out3 <= 12'hc2c;
      27: out3 <= 12'hc1f;
      28: out3 <= 12'hc14;
      29: out3 <= 12'hc0b;
      30: out3 <= 12'hc05;
      31: out3 <= 12'hc01;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D31(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hf9c;
      2: out3 <= 12'hf38;
      3: out3 <= 12'hed7;
      4: out3 <= 12'he78;
      5: out3 <= 12'he1d;
      6: out3 <= 12'hdc7;
      7: out3 <= 12'hd76;
      8: out3 <= 12'hd2c;
      9: out3 <= 12'hce8;
      10: out3 <= 12'hcad;
      11: out3 <= 12'hc79;
      12: out3 <= 12'hc4e;
      13: out3 <= 12'hc2c;
      14: out3 <= 12'hc14;
      15: out3 <= 12'hc05;
      16: out3 <= 12'hc00;
      17: out3 <= 12'hc05;
      18: out3 <= 12'hc14;
      19: out3 <= 12'hc2c;
      20: out3 <= 12'hc4e;
      21: out3 <= 12'hc79;
      22: out3 <= 12'hcad;
      23: out3 <= 12'hce8;
      24: out3 <= 12'hd2c;
      25: out3 <= 12'hd76;
      26: out3 <= 12'hdc7;
      27: out3 <= 12'he1d;
      28: out3 <= 12'he78;
      29: out3 <= 12'hed7;
      30: out3 <= 12'hf38;
      31: out3 <= 12'hf9c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D32(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hf6a;
      2: out3 <= 12'hed7;
      3: out3 <= 12'he4a;
      4: out3 <= 12'hdc7;
      5: out3 <= 12'hd50;
      6: out3 <= 12'hce8;
      7: out3 <= 12'hc92;
      8: out3 <= 12'hc4e;
      9: out3 <= 12'hc1f;
      10: out3 <= 12'hc05;
      11: out3 <= 12'hc01;
      12: out3 <= 12'hc14;
      13: out3 <= 12'hc3c;
      14: out3 <= 12'hc79;
      15: out3 <= 12'hcca;
      16: out3 <= 12'hd2c;
      17: out3 <= 12'hd9e;
      18: out3 <= 12'he1d;
      19: out3 <= 12'hea7;
      20: out3 <= 12'hf38;
      21: out3 <= 12'hfce;
      22: out3 <= 12'h64;
      23: out3 <= 12'hf9;
      24: out3 <= 12'h188;
      25: out3 <= 12'h20e;
      26: out3 <= 12'h28a;
      27: out3 <= 12'h2f7;
      28: out3 <= 12'h353;
      29: out3 <= 12'h39e;
      30: out3 <= 12'h3d4;
      31: out3 <= 12'h3f5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D34(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hfe7;
      1: out3 <= 12'hfb5;
      2: out3 <= 12'hf83;
      3: out3 <= 12'hf51;
      4: out3 <= 12'hf20;
      5: out3 <= 12'heef;
      6: out3 <= 12'hebf;
      7: out3 <= 12'he8f;
      8: out3 <= 12'he61;
      9: out3 <= 12'he34;
      10: out3 <= 12'he07;
      11: out3 <= 12'hddc;
      12: out3 <= 12'hdb2;
      13: out3 <= 12'hd8a;
      14: out3 <= 12'hd63;
      15: out3 <= 12'hd3e;
      16: out3 <= 12'hd1a;
      17: out3 <= 12'hcf9;
      18: out3 <= 12'hcd9;
      19: out3 <= 12'hcbb;
      20: out3 <= 12'hc9f;
      21: out3 <= 12'hc85;
      22: out3 <= 12'hc6d;
      23: out3 <= 12'hc58;
      24: out3 <= 12'hc45;
      25: out3 <= 12'hc34;
      26: out3 <= 12'hc25;
      27: out3 <= 12'hc19;
      28: out3 <= 12'hc0f;
      29: out3 <= 12'hc08;
      30: out3 <= 12'hc03;
      31: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D35(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hfce;
      1: out3 <= 12'hf6a;
      2: out3 <= 12'hf07;
      3: out3 <= 12'hea7;
      4: out3 <= 12'he4a;
      5: out3 <= 12'hdf2;
      6: out3 <= 12'hd9e;
      7: out3 <= 12'hd50;
      8: out3 <= 12'hd09;
      9: out3 <= 12'hcca;
      10: out3 <= 12'hc92;
      11: out3 <= 12'hc62;
      12: out3 <= 12'hc3c;
      13: out3 <= 12'hc1f;
      14: out3 <= 12'hc0b;
      15: out3 <= 12'hc01;
      16: out3 <= 12'hc01;
      17: out3 <= 12'hc0b;
      18: out3 <= 12'hc1f;
      19: out3 <= 12'hc3c;
      20: out3 <= 12'hc62;
      21: out3 <= 12'hc92;
      22: out3 <= 12'hcca;
      23: out3 <= 12'hd09;
      24: out3 <= 12'hd50;
      25: out3 <= 12'hd9e;
      26: out3 <= 12'hdf2;
      27: out3 <= 12'he4a;
      28: out3 <= 12'hea7;
      29: out3 <= 12'hf07;
      30: out3 <= 12'hf6a;
      31: out3 <= 12'hfce;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D36(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hfb5;
      1: out3 <= 12'hf20;
      2: out3 <= 12'he8f;
      3: out3 <= 12'he07;
      4: out3 <= 12'hd8a;
      5: out3 <= 12'hd1a;
      6: out3 <= 12'hcbb;
      7: out3 <= 12'hc6d;
      8: out3 <= 12'hc34;
      9: out3 <= 12'hc0f;
      10: out3 <= 12'hc00;
      11: out3 <= 12'hc08;
      12: out3 <= 12'hc25;
      13: out3 <= 12'hc58;
      14: out3 <= 12'hc9f;
      15: out3 <= 12'hcf9;
      16: out3 <= 12'hd63;
      17: out3 <= 12'hddc;
      18: out3 <= 12'he61;
      19: out3 <= 12'heef;
      20: out3 <= 12'hf83;
      21: out3 <= 12'h19;
      22: out3 <= 12'haf;
      23: out3 <= 12'h141;
      24: out3 <= 12'h1cc;
      25: out3 <= 12'h24e;
      26: out3 <= 12'h2c2;
      27: out3 <= 12'h327;
      28: out3 <= 12'h37b;
      29: out3 <= 12'h3bb;
      30: out3 <= 12'h3e7;
      31: out3 <= 12'h3fd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock17145(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i2_in;
   reg [4:0] i2;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_25092(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a450;
   wire signed [11:0] a403;
   wire signed [11:0] a453;
   wire signed [11:0] a407;
   wire signed [11:0] a454;
   wire signed [11:0] a455;
   wire signed [11:0] a458;
   wire signed [11:0] a459;
   wire signed [11:0] a462;
   wire signed [11:0] a463;
   wire signed [11:0] a466;
   wire signed [11:0] a427;
   wire signed [11:0] a469;
   wire signed [11:0] a431;
   wire signed [11:0] a470;
   wire signed [11:0] a471;
   wire signed [11:0] a474;
   wire signed [11:0] a475;
   wire signed [11:0] a478;
   wire signed [11:0] a479;
   reg signed [11:0] tm717;
   reg signed [11:0] tm721;
   reg signed [11:0] tm733;
   reg signed [11:0] tm737;
   reg signed [11:0] tm749;
   reg signed [11:0] tm753;
   reg signed [11:0] tm765;
   reg signed [11:0] tm769;
   reg signed [11:0] tm781;
   reg signed [11:0] tm785;
   reg signed [11:0] tm797;
   reg signed [11:0] tm801;
   reg signed [11:0] tm813;
   reg signed [11:0] tm820;
   reg signed [11:0] tm827;
   reg signed [11:0] tm834;
   reg signed [11:0] tm718;
   reg signed [11:0] tm722;
   reg signed [11:0] tm734;
   reg signed [11:0] tm738;
   reg signed [11:0] tm750;
   reg signed [11:0] tm754;
   reg signed [11:0] tm766;
   reg signed [11:0] tm770;
   reg signed [11:0] tm782;
   reg signed [11:0] tm786;
   reg signed [11:0] tm798;
   reg signed [11:0] tm802;
   reg signed [11:0] tm814;
   reg signed [11:0] tm821;
   reg signed [11:0] tm828;
   reg signed [11:0] tm835;
   wire signed [11:0] tm34;
   wire signed [11:0] a408;
   wire signed [11:0] tm35;
   wire signed [11:0] a410;
   wire signed [11:0] tm36;
   wire signed [11:0] a414;
   wire signed [11:0] tm37;
   wire signed [11:0] a416;
   wire signed [11:0] tm38;
   wire signed [11:0] a420;
   wire signed [11:0] tm39;
   wire signed [11:0] a422;
   wire signed [11:0] tm42;
   wire signed [11:0] a432;
   wire signed [11:0] tm43;
   wire signed [11:0] a434;
   wire signed [11:0] tm44;
   wire signed [11:0] a438;
   wire signed [11:0] tm45;
   wire signed [11:0] a440;
   wire signed [11:0] tm46;
   wire signed [11:0] a444;
   wire signed [11:0] tm47;
   wire signed [11:0] a446;
   reg signed [11:0] tm719;
   reg signed [11:0] tm723;
   reg signed [11:0] tm735;
   reg signed [11:0] tm739;
   reg signed [11:0] tm751;
   reg signed [11:0] tm755;
   reg signed [11:0] tm767;
   reg signed [11:0] tm771;
   reg signed [11:0] tm783;
   reg signed [11:0] tm787;
   reg signed [11:0] tm799;
   reg signed [11:0] tm803;
   reg signed [11:0] tm815;
   reg signed [11:0] tm822;
   reg signed [11:0] tm829;
   reg signed [11:0] tm836;
   reg signed [11:0] tm132;
   reg signed [11:0] tm133;
   reg signed [11:0] tm136;
   reg signed [11:0] tm137;
   reg signed [11:0] tm140;
   reg signed [11:0] tm141;
   reg signed [11:0] tm148;
   reg signed [11:0] tm149;
   reg signed [11:0] tm152;
   reg signed [11:0] tm153;
   reg signed [11:0] tm156;
   reg signed [11:0] tm157;
   reg signed [11:0] tm720;
   reg signed [11:0] tm724;
   reg signed [11:0] tm736;
   reg signed [11:0] tm740;
   reg signed [11:0] tm752;
   reg signed [11:0] tm756;
   reg signed [11:0] tm768;
   reg signed [11:0] tm772;
   reg signed [11:0] tm784;
   reg signed [11:0] tm788;
   reg signed [11:0] tm800;
   reg signed [11:0] tm804;
   reg signed [11:0] tm816;
   reg signed [11:0] tm823;
   reg signed [11:0] tm830;
   reg signed [11:0] tm837;
   reg signed [11:0] tm817;
   reg signed [11:0] tm824;
   reg signed [11:0] tm831;
   reg signed [11:0] tm838;
   wire signed [11:0] a409;
   wire signed [11:0] a411;
   wire signed [11:0] a412;
   wire signed [11:0] a413;
   wire signed [11:0] a415;
   wire signed [11:0] a417;
   wire signed [11:0] a418;
   wire signed [11:0] a419;
   wire signed [11:0] a421;
   wire signed [11:0] a423;
   wire signed [11:0] a424;
   wire signed [11:0] a425;
   wire signed [11:0] a433;
   wire signed [11:0] a435;
   wire signed [11:0] a436;
   wire signed [11:0] a437;
   wire signed [11:0] a439;
   wire signed [11:0] a441;
   wire signed [11:0] a442;
   wire signed [11:0] a443;
   wire signed [11:0] a445;
   wire signed [11:0] a447;
   wire signed [11:0] a448;
   wire signed [11:0] a449;
   reg signed [11:0] tm818;
   reg signed [11:0] tm825;
   reg signed [11:0] tm832;
   reg signed [11:0] tm839;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   reg signed [11:0] tm819;
   reg signed [11:0] tm826;
   reg signed [11:0] tm833;
   reg signed [11:0] tm840;


   assign a450 = X0;
   assign a403 = a450;
   assign a453 = X1;
   assign a407 = a453;
   assign a454 = X2;
   assign a455 = X3;
   assign a458 = X4;
   assign a459 = X5;
   assign a462 = X6;
   assign a463 = X7;
   assign a466 = X8;
   assign a427 = a466;
   assign a469 = X9;
   assign a431 = a469;
   assign a470 = X10;
   assign a471 = X11;
   assign a474 = X12;
   assign a475 = X13;
   assign a478 = X14;
   assign a479 = X15;
   assign a408 = tm34;
   assign a410 = tm35;
   assign a414 = tm36;
   assign a416 = tm37;
   assign a420 = tm38;
   assign a422 = tm39;
   assign a432 = tm42;
   assign a434 = tm43;
   assign a438 = tm44;
   assign a440 = tm45;
   assign a444 = tm46;
   assign a446 = tm47;
   assign Y0 = tm819;
   assign Y1 = tm826;
   assign Y8 = tm833;
   assign Y9 = tm840;

   D24 instD24inst0(.addr(i2[4:0]), .out(tm38), .clk(clk));

   D23 instD23inst0(.addr(i2[4:0]), .out(tm36), .clk(clk));

   D26 instD26inst0(.addr(i2[4:0]), .out(tm42), .clk(clk));

   D22 instD22inst0(.addr(i2[4:0]), .out(tm34), .clk(clk));

   D27 instD27inst0(.addr(i2[4:0]), .out(tm44), .clk(clk));

   D28 instD28inst0(.addr(i2[4:0]), .out(tm46), .clk(clk));

   D30 instD30inst0(.addr(i2[4:0]), .out(tm35), .clk(clk));

   D31 instD31inst0(.addr(i2[4:0]), .out(tm37), .clk(clk));

   D32 instD32inst0(.addr(i2[4:0]), .out(tm39), .clk(clk));

   D34 instD34inst0(.addr(i2[4:0]), .out(tm43), .clk(clk));

   D35 instD35inst0(.addr(i2[4:0]), .out(tm45), .clk(clk));

   D36 instD36inst0(.addr(i2[4:0]), .out(tm47), .clk(clk));

    multfix #(12, 2) m17243(.a(tm132), .b(tm720), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17265(.a(tm133), .b(tm724), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17282(.a(tm133), .b(tm720), .clk(clk), .q_sc(a412), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17293(.a(tm132), .b(tm724), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17322(.a(tm136), .b(tm736), .clk(clk), .q_sc(a415), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17344(.a(tm137), .b(tm740), .clk(clk), .q_sc(a417), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17361(.a(tm137), .b(tm736), .clk(clk), .q_sc(a418), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17372(.a(tm136), .b(tm740), .clk(clk), .q_sc(a419), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17401(.a(tm140), .b(tm752), .clk(clk), .q_sc(a421), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17423(.a(tm141), .b(tm756), .clk(clk), .q_sc(a423), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17440(.a(tm141), .b(tm752), .clk(clk), .q_sc(a424), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17451(.a(tm140), .b(tm756), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17559(.a(tm148), .b(tm768), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17581(.a(tm149), .b(tm772), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17598(.a(tm149), .b(tm768), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17609(.a(tm148), .b(tm772), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17638(.a(tm152), .b(tm784), .clk(clk), .q_sc(a439), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17660(.a(tm153), .b(tm788), .clk(clk), .q_sc(a441), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17677(.a(tm153), .b(tm784), .clk(clk), .q_sc(a442), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17688(.a(tm152), .b(tm788), .clk(clk), .q_sc(a443), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17717(.a(tm156), .b(tm800), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17739(.a(tm157), .b(tm804), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17756(.a(tm157), .b(tm800), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(12, 2) m17767(.a(tm156), .b(tm804), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    subfxp #(12, 1) sub17271(.a(a409), .b(a411), .clk(clk), .q(Y2));    // 6
    addfxp #(12, 1) add17300(.a(a412), .b(a413), .clk(clk), .q(Y3));    // 6
    subfxp #(12, 1) sub17350(.a(a415), .b(a417), .clk(clk), .q(Y4));    // 6
    addfxp #(12, 1) add17379(.a(a418), .b(a419), .clk(clk), .q(Y5));    // 6
    subfxp #(12, 1) sub17429(.a(a421), .b(a423), .clk(clk), .q(Y6));    // 6
    addfxp #(12, 1) add17458(.a(a424), .b(a425), .clk(clk), .q(Y7));    // 6
    subfxp #(12, 1) sub17587(.a(a433), .b(a435), .clk(clk), .q(Y10));    // 6
    addfxp #(12, 1) add17616(.a(a436), .b(a437), .clk(clk), .q(Y11));    // 6
    subfxp #(12, 1) sub17666(.a(a439), .b(a441), .clk(clk), .q(Y12));    // 6
    addfxp #(12, 1) add17695(.a(a442), .b(a443), .clk(clk), .q(Y13));    // 6
    subfxp #(12, 1) sub17745(.a(a445), .b(a447), .clk(clk), .q(Y14));    // 6
    addfxp #(12, 1) add17774(.a(a448), .b(a449), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm132 <= 0;
         tm720 <= 0;
         tm133 <= 0;
         tm724 <= 0;
         tm133 <= 0;
         tm720 <= 0;
         tm132 <= 0;
         tm724 <= 0;
         tm136 <= 0;
         tm736 <= 0;
         tm137 <= 0;
         tm740 <= 0;
         tm137 <= 0;
         tm736 <= 0;
         tm136 <= 0;
         tm740 <= 0;
         tm140 <= 0;
         tm752 <= 0;
         tm141 <= 0;
         tm756 <= 0;
         tm141 <= 0;
         tm752 <= 0;
         tm140 <= 0;
         tm756 <= 0;
         tm148 <= 0;
         tm768 <= 0;
         tm149 <= 0;
         tm772 <= 0;
         tm149 <= 0;
         tm768 <= 0;
         tm148 <= 0;
         tm772 <= 0;
         tm152 <= 0;
         tm784 <= 0;
         tm153 <= 0;
         tm788 <= 0;
         tm153 <= 0;
         tm784 <= 0;
         tm152 <= 0;
         tm788 <= 0;
         tm156 <= 0;
         tm800 <= 0;
         tm157 <= 0;
         tm804 <= 0;
         tm157 <= 0;
         tm800 <= 0;
         tm156 <= 0;
         tm804 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm717 <= a454;
         tm721 <= a455;
         tm733 <= a458;
         tm737 <= a459;
         tm749 <= a462;
         tm753 <= a463;
         tm765 <= a470;
         tm769 <= a471;
         tm781 <= a474;
         tm785 <= a475;
         tm797 <= a478;
         tm801 <= a479;
         tm813 <= a403;
         tm820 <= a407;
         tm827 <= a427;
         tm834 <= a431;
         tm718 <= tm717;
         tm722 <= tm721;
         tm734 <= tm733;
         tm738 <= tm737;
         tm750 <= tm749;
         tm754 <= tm753;
         tm766 <= tm765;
         tm770 <= tm769;
         tm782 <= tm781;
         tm786 <= tm785;
         tm798 <= tm797;
         tm802 <= tm801;
         tm814 <= tm813;
         tm821 <= tm820;
         tm828 <= tm827;
         tm835 <= tm834;
         tm719 <= tm718;
         tm723 <= tm722;
         tm735 <= tm734;
         tm739 <= tm738;
         tm751 <= tm750;
         tm755 <= tm754;
         tm767 <= tm766;
         tm771 <= tm770;
         tm783 <= tm782;
         tm787 <= tm786;
         tm799 <= tm798;
         tm803 <= tm802;
         tm815 <= tm814;
         tm822 <= tm821;
         tm829 <= tm828;
         tm836 <= tm835;
         tm132 <= a408;
         tm133 <= a410;
         tm136 <= a414;
         tm137 <= a416;
         tm140 <= a420;
         tm141 <= a422;
         tm148 <= a432;
         tm149 <= a434;
         tm152 <= a438;
         tm153 <= a440;
         tm156 <= a444;
         tm157 <= a446;
         tm720 <= tm719;
         tm724 <= tm723;
         tm736 <= tm735;
         tm740 <= tm739;
         tm752 <= tm751;
         tm756 <= tm755;
         tm768 <= tm767;
         tm772 <= tm771;
         tm784 <= tm783;
         tm788 <= tm787;
         tm800 <= tm799;
         tm804 <= tm803;
         tm816 <= tm815;
         tm823 <= tm822;
         tm830 <= tm829;
         tm837 <= tm836;
         tm817 <= tm816;
         tm824 <= tm823;
         tm831 <= tm830;
         tm838 <= tm837;
         tm818 <= tm817;
         tm825 <= tm824;
         tm832 <= tm831;
         tm839 <= tm838;
         tm819 <= tm818;
         tm826 <= tm825;
         tm833 <= tm832;
         tm840 <= tm839;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock18310(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_25095(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a273;
   wire signed [11:0] a274;
   wire signed [11:0] a275;
   wire signed [11:0] a276;
   wire signed [11:0] a281;
   wire signed [11:0] a282;
   wire signed [11:0] a283;
   wire signed [11:0] a284;
   wire signed [11:0] a289;
   wire signed [11:0] a290;
   wire signed [11:0] a291;
   wire signed [11:0] a292;
   wire signed [11:0] a297;
   wire signed [11:0] a298;
   wire signed [11:0] a299;
   wire signed [11:0] a300;
   wire signed [12:0] tm405;
   wire signed [12:0] tm406;
   wire signed [12:0] tm407;
   wire signed [12:0] tm408;
   wire signed [12:0] tm409;
   wire signed [12:0] tm410;
   wire signed [12:0] tm411;
   wire signed [12:0] tm412;
   wire signed [12:0] tm421;
   wire signed [12:0] tm422;
   wire signed [12:0] tm423;
   wire signed [12:0] tm424;
   wire signed [12:0] tm425;
   wire signed [12:0] tm426;
   wire signed [12:0] tm427;
   wire signed [12:0] tm428;
   wire signed [11:0] t450;
   wire signed [11:0] t451;
   wire signed [11:0] t452;
   wire signed [11:0] t453;
   wire signed [11:0] t454;
   wire signed [11:0] t455;
   wire signed [11:0] t456;
   wire signed [11:0] t457;
   wire signed [11:0] t466;
   wire signed [11:0] t467;
   wire signed [11:0] t468;
   wire signed [11:0] t469;
   wire signed [11:0] t470;
   wire signed [11:0] t471;
   wire signed [11:0] t472;
   wire signed [11:0] t473;
   wire signed [12:0] tm413;
   wire signed [12:0] tm414;
   wire signed [12:0] tm415;
   wire signed [12:0] tm416;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [12:0] tm417;
   wire signed [12:0] tm418;
   wire signed [12:0] tm419;
   wire signed [12:0] tm420;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [12:0] tm429;
   wire signed [12:0] tm430;
   wire signed [12:0] tm431;
   wire signed [12:0] tm432;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [12:0] tm433;
   wire signed [12:0] tm434;
   wire signed [12:0] tm435;
   wire signed [12:0] tm436;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   wire signed [11:0] t458;
   wire signed [11:0] t459;
   wire signed [11:0] t460;
   wire signed [11:0] t461;
   wire signed [11:0] t462;
   wire signed [11:0] t463;
   wire signed [11:0] t464;
   wire signed [11:0] t465;
   wire signed [11:0] t474;
   wire signed [11:0] t475;
   wire signed [11:0] t476;
   wire signed [11:0] t477;
   wire signed [11:0] t478;
   wire signed [11:0] t479;
   wire signed [11:0] t480;
   wire signed [11:0] t481;


   assign a273 = X0;
   assign a274 = X4;
   assign a275 = X1;
   assign a276 = X5;
   assign a281 = X2;
   assign a282 = X6;
   assign a283 = X3;
   assign a284 = X7;
   assign a289 = X8;
   assign a290 = X12;
   assign a291 = X9;
   assign a292 = X13;
   assign a297 = X10;
   assign a298 = X14;
   assign a299 = X11;
   assign a300 = X15;
   assign t450 = tm405[12:1];
   assign t451 = tm406[12:1];
   assign t452 = tm407[12:1];
   assign t453 = tm408[12:1];
   assign t454 = tm409[12:1];
   assign t455 = tm410[12:1];
   assign t456 = tm411[12:1];
   assign t457 = tm412[12:1];
   assign t466 = tm421[12:1];
   assign t467 = tm422[12:1];
   assign t468 = tm423[12:1];
   assign t469 = tm424[12:1];
   assign t470 = tm425[12:1];
   assign t471 = tm426[12:1];
   assign t472 = tm427[12:1];
   assign t473 = tm428[12:1];
   assign Y0 = t458;
   assign Y1 = t459;
   assign Y4 = t460;
   assign Y5 = t461;
   assign Y2 = t462;
   assign Y3 = t463;
   assign Y6 = t464;
   assign Y7 = t465;
   assign Y8 = t474;
   assign Y9 = t475;
   assign Y12 = t476;
   assign Y13 = t477;
   assign Y10 = t478;
   assign Y11 = t479;
   assign Y14 = t480;
   assign Y15 = t481;
   assign t458 = tm413[12:1];
   assign t459 = tm414[12:1];
   assign t460 = tm415[12:1];
   assign t461 = tm416[12:1];
   assign t462 = tm417[12:1];
   assign t463 = tm418[12:1];
   assign t464 = tm419[12:1];
   assign t465 = tm420[12:1];
   assign t474 = tm429[12:1];
   assign t475 = tm430[12:1];
   assign t476 = tm431[12:1];
   assign t477 = tm432[12:1];
   assign t478 = tm433[12:1];
   assign t479 = tm434[12:1];
   assign t480 = tm435[12:1];
   assign t481 = tm436[12:1];

    addfxp #(13, 1) add18322(.a({{1{a273[11]}}, a273}), .b({{1{a274[11]}}, a274}), .clk(clk), .q(tm405));    // 0
    addfxp #(13, 1) add18337(.a({{1{a275[11]}}, a275}), .b({{1{a276[11]}}, a276}), .clk(clk), .q(tm406));    // 0
    subfxp #(13, 1) sub18351(.a({{1{a273[11]}}, a273}), .b({{1{a274[11]}}, a274}), .clk(clk), .q(tm407));    // 0
    subfxp #(13, 1) sub18365(.a({{1{a275[11]}}, a275}), .b({{1{a276[11]}}, a276}), .clk(clk), .q(tm408));    // 0
    addfxp #(13, 1) add18380(.a({{1{a281[11]}}, a281}), .b({{1{a282[11]}}, a282}), .clk(clk), .q(tm409));    // 0
    addfxp #(13, 1) add18395(.a({{1{a283[11]}}, a283}), .b({{1{a284[11]}}, a284}), .clk(clk), .q(tm410));    // 0
    subfxp #(13, 1) sub18409(.a({{1{a281[11]}}, a281}), .b({{1{a282[11]}}, a282}), .clk(clk), .q(tm411));    // 0
    subfxp #(13, 1) sub18423(.a({{1{a283[11]}}, a283}), .b({{1{a284[11]}}, a284}), .clk(clk), .q(tm412));    // 0
    addfxp #(13, 1) add18522(.a({{1{a289[11]}}, a289}), .b({{1{a290[11]}}, a290}), .clk(clk), .q(tm421));    // 0
    addfxp #(13, 1) add18537(.a({{1{a291[11]}}, a291}), .b({{1{a292[11]}}, a292}), .clk(clk), .q(tm422));    // 0
    subfxp #(13, 1) sub18551(.a({{1{a289[11]}}, a289}), .b({{1{a290[11]}}, a290}), .clk(clk), .q(tm423));    // 0
    subfxp #(13, 1) sub18565(.a({{1{a291[11]}}, a291}), .b({{1{a292[11]}}, a292}), .clk(clk), .q(tm424));    // 0
    addfxp #(13, 1) add18580(.a({{1{a297[11]}}, a297}), .b({{1{a298[11]}}, a298}), .clk(clk), .q(tm425));    // 0
    addfxp #(13, 1) add18595(.a({{1{a299[11]}}, a299}), .b({{1{a300[11]}}, a300}), .clk(clk), .q(tm426));    // 0
    subfxp #(13, 1) sub18609(.a({{1{a297[11]}}, a297}), .b({{1{a298[11]}}, a298}), .clk(clk), .q(tm427));    // 0
    subfxp #(13, 1) sub18623(.a({{1{a299[11]}}, a299}), .b({{1{a300[11]}}, a300}), .clk(clk), .q(tm428));    // 0
    addfxp #(13, 1) add18430(.a({{1{t450[11]}}, t450}), .b({{1{t454[11]}}, t454}), .clk(clk), .q(tm413));    // 1
    addfxp #(13, 1) add18437(.a({{1{t451[11]}}, t451}), .b({{1{t455[11]}}, t455}), .clk(clk), .q(tm414));    // 1
    subfxp #(13, 1) sub18443(.a({{1{t450[11]}}, t450}), .b({{1{t454[11]}}, t454}), .clk(clk), .q(tm415));    // 1
    subfxp #(13, 1) sub18449(.a({{1{t451[11]}}, t451}), .b({{1{t455[11]}}, t455}), .clk(clk), .q(tm416));    // 1
    addfxp #(13, 1) add18472(.a({{1{t452[11]}}, t452}), .b({{1{t457[11]}}, t457}), .clk(clk), .q(tm417));    // 1
    subfxp #(13, 1) sub18478(.a({{1{t453[11]}}, t453}), .b({{1{t456[11]}}, t456}), .clk(clk), .q(tm418));    // 1
    subfxp #(13, 1) sub18484(.a({{1{t452[11]}}, t452}), .b({{1{t457[11]}}, t457}), .clk(clk), .q(tm419));    // 1
    addfxp #(13, 1) add18491(.a({{1{t453[11]}}, t453}), .b({{1{t456[11]}}, t456}), .clk(clk), .q(tm420));    // 1
    addfxp #(13, 1) add18630(.a({{1{t466[11]}}, t466}), .b({{1{t470[11]}}, t470}), .clk(clk), .q(tm429));    // 1
    addfxp #(13, 1) add18637(.a({{1{t467[11]}}, t467}), .b({{1{t471[11]}}, t471}), .clk(clk), .q(tm430));    // 1
    subfxp #(13, 1) sub18643(.a({{1{t466[11]}}, t466}), .b({{1{t470[11]}}, t470}), .clk(clk), .q(tm431));    // 1
    subfxp #(13, 1) sub18649(.a({{1{t467[11]}}, t467}), .b({{1{t471[11]}}, t471}), .clk(clk), .q(tm432));    // 1
    addfxp #(13, 1) add18672(.a({{1{t468[11]}}, t468}), .b({{1{t473[11]}}, t473}), .clk(clk), .q(tm433));    // 1
    subfxp #(13, 1) sub18678(.a({{1{t469[11]}}, t469}), .b({{1{t472[11]}}, t472}), .clk(clk), .q(tm434));    // 1
    subfxp #(13, 1) sub18684(.a({{1{t468[11]}}, t468}), .b({{1{t473[11]}}, t473}), .clk(clk), .q(tm435));    // 1
    addfxp #(13, 1) add18691(.a({{1{t469[11]}}, t469}), .b({{1{t472[11]}}, t472}), .clk(clk), .q(tm436));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 101
// Gap: 128
module rc18715(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm18713 instPerm25096(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 101
// Gap: 128
module perm18713(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inBank0[1] = addr0[9] ^ addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outBank0[1] = addr0b[9] ^ addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[9] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inBank1[1] = addr1[9] ^ addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outBank1[1] = addr1b[9] ^ addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[9] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[8] ^ addr2[0];
   assign inBank2[1] = addr2[9] ^ addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[8] ^ addr2b[0];
   assign outBank2[1] = addr2b[9] ^ addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[8] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[9] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[8] ^ addr3[0];
   assign inBank3[1] = addr3[9] ^ addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[8] ^ addr3b[0];
   assign outBank3[1] = addr3b[9] ^ addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[8] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[9] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[8] ^ addr4[0];
   assign inBank4[1] = addr4[9] ^ addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[6];
   assign inAddr4[4] = addr4[7];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[8] ^ addr4b[0];
   assign outBank4[1] = addr4b[9] ^ addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[8] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[9] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[8] ^ addr5[0];
   assign inBank5[1] = addr5[9] ^ addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[6];
   assign inAddr5[4] = addr5[7];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[8] ^ addr5b[0];
   assign outBank5[1] = addr5b[9] ^ addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[8] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[9] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[8] ^ addr6[0];
   assign inBank6[1] = addr6[9] ^ addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[6];
   assign inAddr6[4] = addr6[7];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[8] ^ addr6b[0];
   assign outBank6[1] = addr6b[9] ^ addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[8] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[9] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[8] ^ addr7[0];
   assign inBank7[1] = addr7[9] ^ addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[6];
   assign inAddr7[4] = addr7[7];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[8] ^ addr7b[0];
   assign outBank7[1] = addr7b[9] ^ addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[8] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[9] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(97, 7) nextReg_25101(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_25104(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_18713 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 96)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 99)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 96) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 96)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_6), .y0(w_1_4), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_5), .x1(w_0_7), .y0(w_1_5), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[5];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_5_pipe), .y0(w_2_4), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_6_pipe), .x1(w_1_7_pipe), .y0(w_2_6), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_6), .y0(z_1_4), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_5), .x1(z_0_7), .y0(z_1_5), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_5_pipe), .y0(z_2_4), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_6_pipe), .x1(z_1_7_pipe), .y0(z_2_6), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_6), .y0(u_1_4), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_5), .x1(u_0_7), .y0(u_1_5), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_5_pipe), .y0(u_2_4), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_6_pipe), .x1(u_1_7_pipe), .y0(u_2_6), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray1024_18713(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_25109(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 128
module DirSum_21415(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock18717 codeBlockIsnt25114(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D10(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3fe;
      2: out3 <= 12'h3fc;
      3: out3 <= 12'h3f8;
      4: out3 <= 12'h3f2;
      5: out3 <= 12'h3eb;
      6: out3 <= 12'h3e3;
      7: out3 <= 12'h3d9;
      8: out3 <= 12'h3ce;
      9: out3 <= 12'h3c2;
      10: out3 <= 12'h3b4;
      11: out3 <= 12'h3a6;
      12: out3 <= 12'h395;
      13: out3 <= 12'h384;
      14: out3 <= 12'h372;
      15: out3 <= 12'h35e;
      16: out3 <= 12'h349;
      17: out3 <= 12'h333;
      18: out3 <= 12'h31c;
      19: out3 <= 12'h303;
      20: out3 <= 12'h2ea;
      21: out3 <= 12'h2d0;
      22: out3 <= 12'h2b4;
      23: out3 <= 12'h298;
      24: out3 <= 12'h27b;
      25: out3 <= 12'h25d;
      26: out3 <= 12'h23e;
      27: out3 <= 12'h21f;
      28: out3 <= 12'h1fe;
      29: out3 <= 12'h1dd;
      30: out3 <= 12'h1bb;
      31: out3 <= 12'h199;
      32: out3 <= 12'h176;
      33: out3 <= 12'h153;
      34: out3 <= 12'h12f;
      35: out3 <= 12'h10b;
      36: out3 <= 12'he6;
      37: out3 <= 12'hc2;
      38: out3 <= 12'h9c;
      39: out3 <= 12'h77;
      40: out3 <= 12'h52;
      41: out3 <= 12'h2c;
      42: out3 <= 12'h6;
      43: out3 <= 12'hfe1;
      44: out3 <= 12'hfbb;
      45: out3 <= 12'hf95;
      46: out3 <= 12'hf70;
      47: out3 <= 12'hf4b;
      48: out3 <= 12'hf26;
      49: out3 <= 12'hf01;
      50: out3 <= 12'hedd;
      51: out3 <= 12'heb9;
      52: out3 <= 12'he95;
      53: out3 <= 12'he72;
      54: out3 <= 12'he50;
      55: out3 <= 12'he2e;
      56: out3 <= 12'he0d;
      57: out3 <= 12'hdec;
      58: out3 <= 12'hdcc;
      59: out3 <= 12'hdad;
      60: out3 <= 12'hd8f;
      61: out3 <= 12'hd72;
      62: out3 <= 12'hd55;
      63: out3 <= 12'hd39;
      64: out3 <= 12'hd1f;
      65: out3 <= 12'hd05;
      66: out3 <= 12'hcec;
      67: out3 <= 12'hcd5;
      68: out3 <= 12'hcbe;
      69: out3 <= 12'hca9;
      70: out3 <= 12'hc95;
      71: out3 <= 12'hc82;
      72: out3 <= 12'hc70;
      73: out3 <= 12'hc60;
      74: out3 <= 12'hc50;
      75: out3 <= 12'hc42;
      76: out3 <= 12'hc36;
      77: out3 <= 12'hc2a;
      78: out3 <= 12'hc20;
      79: out3 <= 12'hc18;
      80: out3 <= 12'hc10;
      81: out3 <= 12'hc0a;
      82: out3 <= 12'hc06;
      83: out3 <= 12'hc02;
      84: out3 <= 12'hc00;
      85: out3 <= 12'hc00;
      86: out3 <= 12'hc01;
      87: out3 <= 12'hc03;
      88: out3 <= 12'hc07;
      89: out3 <= 12'hc0c;
      90: out3 <= 12'hc12;
      91: out3 <= 12'hc1a;
      92: out3 <= 12'hc23;
      93: out3 <= 12'hc2e;
      94: out3 <= 12'hc3a;
      95: out3 <= 12'hc47;
      96: out3 <= 12'hc55;
      97: out3 <= 12'hc65;
      98: out3 <= 12'hc76;
      99: out3 <= 12'hc88;
      100: out3 <= 12'hc9c;
      101: out3 <= 12'hcb0;
      102: out3 <= 12'hcc6;
      103: out3 <= 12'hcdd;
      104: out3 <= 12'hcf5;
      105: out3 <= 12'hd0d;
      106: out3 <= 12'hd27;
      107: out3 <= 12'hd42;
      108: out3 <= 12'hd5e;
      109: out3 <= 12'hd7b;
      110: out3 <= 12'hd99;
      111: out3 <= 12'hdb8;
      112: out3 <= 12'hdd7;
      113: out3 <= 12'hdf7;
      114: out3 <= 12'he18;
      115: out3 <= 12'he39;
      116: out3 <= 12'he5b;
      117: out3 <= 12'he7e;
      118: out3 <= 12'hea1;
      119: out3 <= 12'hec5;
      120: out3 <= 12'hee9;
      121: out3 <= 12'hf0d;
      122: out3 <= 12'hf32;
      123: out3 <= 12'hf57;
      124: out3 <= 12'hf7c;
      125: out3 <= 12'hfa2;
      126: out3 <= 12'hfc7;
      127: out3 <= 12'hfed;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hfed;
      1: out3 <= 12'hfc7;
      2: out3 <= 12'hfa2;
      3: out3 <= 12'hf7c;
      4: out3 <= 12'hf57;
      5: out3 <= 12'hf32;
      6: out3 <= 12'hf0d;
      7: out3 <= 12'hee9;
      8: out3 <= 12'hec5;
      9: out3 <= 12'hea1;
      10: out3 <= 12'he7e;
      11: out3 <= 12'he5b;
      12: out3 <= 12'he39;
      13: out3 <= 12'he18;
      14: out3 <= 12'hdf7;
      15: out3 <= 12'hdd7;
      16: out3 <= 12'hdb8;
      17: out3 <= 12'hd99;
      18: out3 <= 12'hd7b;
      19: out3 <= 12'hd5e;
      20: out3 <= 12'hd42;
      21: out3 <= 12'hd27;
      22: out3 <= 12'hd0d;
      23: out3 <= 12'hcf5;
      24: out3 <= 12'hcdd;
      25: out3 <= 12'hcc6;
      26: out3 <= 12'hcb0;
      27: out3 <= 12'hc9c;
      28: out3 <= 12'hc88;
      29: out3 <= 12'hc76;
      30: out3 <= 12'hc65;
      31: out3 <= 12'hc55;
      32: out3 <= 12'hc47;
      33: out3 <= 12'hc3a;
      34: out3 <= 12'hc2e;
      35: out3 <= 12'hc23;
      36: out3 <= 12'hc1a;
      37: out3 <= 12'hc12;
      38: out3 <= 12'hc0c;
      39: out3 <= 12'hc07;
      40: out3 <= 12'hc03;
      41: out3 <= 12'hc01;
      42: out3 <= 12'hc00;
      43: out3 <= 12'hc00;
      44: out3 <= 12'hc02;
      45: out3 <= 12'hc06;
      46: out3 <= 12'hc0a;
      47: out3 <= 12'hc10;
      48: out3 <= 12'hc18;
      49: out3 <= 12'hc20;
      50: out3 <= 12'hc2a;
      51: out3 <= 12'hc36;
      52: out3 <= 12'hc42;
      53: out3 <= 12'hc50;
      54: out3 <= 12'hc60;
      55: out3 <= 12'hc70;
      56: out3 <= 12'hc82;
      57: out3 <= 12'hc95;
      58: out3 <= 12'hca9;
      59: out3 <= 12'hcbe;
      60: out3 <= 12'hcd5;
      61: out3 <= 12'hcec;
      62: out3 <= 12'hd05;
      63: out3 <= 12'hd1f;
      64: out3 <= 12'hd39;
      65: out3 <= 12'hd55;
      66: out3 <= 12'hd72;
      67: out3 <= 12'hd8f;
      68: out3 <= 12'hdad;
      69: out3 <= 12'hdcc;
      70: out3 <= 12'hdec;
      71: out3 <= 12'he0d;
      72: out3 <= 12'he2e;
      73: out3 <= 12'he50;
      74: out3 <= 12'he72;
      75: out3 <= 12'he95;
      76: out3 <= 12'heb9;
      77: out3 <= 12'hedd;
      78: out3 <= 12'hf01;
      79: out3 <= 12'hf26;
      80: out3 <= 12'hf4b;
      81: out3 <= 12'hf70;
      82: out3 <= 12'hf95;
      83: out3 <= 12'hfbb;
      84: out3 <= 12'hfe1;
      85: out3 <= 12'h6;
      86: out3 <= 12'h2c;
      87: out3 <= 12'h52;
      88: out3 <= 12'h77;
      89: out3 <= 12'h9c;
      90: out3 <= 12'hc2;
      91: out3 <= 12'he6;
      92: out3 <= 12'h10b;
      93: out3 <= 12'h12f;
      94: out3 <= 12'h153;
      95: out3 <= 12'h176;
      96: out3 <= 12'h199;
      97: out3 <= 12'h1bb;
      98: out3 <= 12'h1dd;
      99: out3 <= 12'h1fe;
      100: out3 <= 12'h21f;
      101: out3 <= 12'h23e;
      102: out3 <= 12'h25d;
      103: out3 <= 12'h27b;
      104: out3 <= 12'h298;
      105: out3 <= 12'h2b4;
      106: out3 <= 12'h2d0;
      107: out3 <= 12'h2ea;
      108: out3 <= 12'h303;
      109: out3 <= 12'h31c;
      110: out3 <= 12'h333;
      111: out3 <= 12'h349;
      112: out3 <= 12'h35e;
      113: out3 <= 12'h372;
      114: out3 <= 12'h384;
      115: out3 <= 12'h395;
      116: out3 <= 12'h3a6;
      117: out3 <= 12'h3b4;
      118: out3 <= 12'h3c2;
      119: out3 <= 12'h3ce;
      120: out3 <= 12'h3d9;
      121: out3 <= 12'h3e3;
      122: out3 <= 12'h3eb;
      123: out3 <= 12'h3f2;
      124: out3 <= 12'h3f8;
      125: out3 <= 12'h3fc;
      126: out3 <= 12'h3fe;
      127: out3 <= 12'h400;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hff3;
      2: out3 <= 12'hfe7;
      3: out3 <= 12'hfda;
      4: out3 <= 12'hfce;
      5: out3 <= 12'hfc1;
      6: out3 <= 12'hfb5;
      7: out3 <= 12'hfa8;
      8: out3 <= 12'hf9c;
      9: out3 <= 12'hf8f;
      10: out3 <= 12'hf83;
      11: out3 <= 12'hf76;
      12: out3 <= 12'hf6a;
      13: out3 <= 12'hf5d;
      14: out3 <= 12'hf51;
      15: out3 <= 12'hf45;
      16: out3 <= 12'hf38;
      17: out3 <= 12'hf2c;
      18: out3 <= 12'hf20;
      19: out3 <= 12'hf13;
      20: out3 <= 12'hf07;
      21: out3 <= 12'hefb;
      22: out3 <= 12'heef;
      23: out3 <= 12'hee3;
      24: out3 <= 12'hed7;
      25: out3 <= 12'hecb;
      26: out3 <= 12'hebf;
      27: out3 <= 12'heb3;
      28: out3 <= 12'hea7;
      29: out3 <= 12'he9b;
      30: out3 <= 12'he8f;
      31: out3 <= 12'he84;
      32: out3 <= 12'he78;
      33: out3 <= 12'he6d;
      34: out3 <= 12'he61;
      35: out3 <= 12'he56;
      36: out3 <= 12'he4a;
      37: out3 <= 12'he3f;
      38: out3 <= 12'he34;
      39: out3 <= 12'he28;
      40: out3 <= 12'he1d;
      41: out3 <= 12'he12;
      42: out3 <= 12'he07;
      43: out3 <= 12'hdfc;
      44: out3 <= 12'hdf2;
      45: out3 <= 12'hde7;
      46: out3 <= 12'hddc;
      47: out3 <= 12'hdd2;
      48: out3 <= 12'hdc7;
      49: out3 <= 12'hdbd;
      50: out3 <= 12'hdb2;
      51: out3 <= 12'hda8;
      52: out3 <= 12'hd9e;
      53: out3 <= 12'hd94;
      54: out3 <= 12'hd8a;
      55: out3 <= 12'hd80;
      56: out3 <= 12'hd76;
      57: out3 <= 12'hd6d;
      58: out3 <= 12'hd63;
      59: out3 <= 12'hd5a;
      60: out3 <= 12'hd50;
      61: out3 <= 12'hd47;
      62: out3 <= 12'hd3e;
      63: out3 <= 12'hd35;
      64: out3 <= 12'hd2c;
      65: out3 <= 12'hd23;
      66: out3 <= 12'hd1a;
      67: out3 <= 12'hd12;
      68: out3 <= 12'hd09;
      69: out3 <= 12'hd01;
      70: out3 <= 12'hcf9;
      71: out3 <= 12'hcf0;
      72: out3 <= 12'hce8;
      73: out3 <= 12'hce1;
      74: out3 <= 12'hcd9;
      75: out3 <= 12'hcd1;
      76: out3 <= 12'hcca;
      77: out3 <= 12'hcc2;
      78: out3 <= 12'hcbb;
      79: out3 <= 12'hcb4;
      80: out3 <= 12'hcad;
      81: out3 <= 12'hca6;
      82: out3 <= 12'hc9f;
      83: out3 <= 12'hc98;
      84: out3 <= 12'hc92;
      85: out3 <= 12'hc8b;
      86: out3 <= 12'hc85;
      87: out3 <= 12'hc7f;
      88: out3 <= 12'hc79;
      89: out3 <= 12'hc73;
      90: out3 <= 12'hc6d;
      91: out3 <= 12'hc68;
      92: out3 <= 12'hc62;
      93: out3 <= 12'hc5d;
      94: out3 <= 12'hc58;
      95: out3 <= 12'hc53;
      96: out3 <= 12'hc4e;
      97: out3 <= 12'hc49;
      98: out3 <= 12'hc45;
      99: out3 <= 12'hc40;
      100: out3 <= 12'hc3c;
      101: out3 <= 12'hc38;
      102: out3 <= 12'hc34;
      103: out3 <= 12'hc30;
      104: out3 <= 12'hc2c;
      105: out3 <= 12'hc29;
      106: out3 <= 12'hc25;
      107: out3 <= 12'hc22;
      108: out3 <= 12'hc1f;
      109: out3 <= 12'hc1c;
      110: out3 <= 12'hc19;
      111: out3 <= 12'hc16;
      112: out3 <= 12'hc14;
      113: out3 <= 12'hc11;
      114: out3 <= 12'hc0f;
      115: out3 <= 12'hc0d;
      116: out3 <= 12'hc0b;
      117: out3 <= 12'hc09;
      118: out3 <= 12'hc08;
      119: out3 <= 12'hc06;
      120: out3 <= 12'hc05;
      121: out3 <= 12'hc04;
      122: out3 <= 12'hc03;
      123: out3 <= 12'hc02;
      124: out3 <= 12'hc01;
      125: out3 <= 12'hc01;
      126: out3 <= 12'hc00;
      127: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D9(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3ff;
      2: out3 <= 12'h3fe;
      3: out3 <= 12'h3fc;
      4: out3 <= 12'h3fa;
      5: out3 <= 12'h3f7;
      6: out3 <= 12'h3f3;
      7: out3 <= 12'h3ef;
      8: out3 <= 12'h3ea;
      9: out3 <= 12'h3e4;
      10: out3 <= 12'h3de;
      11: out3 <= 12'h3d7;
      12: out3 <= 12'h3d0;
      13: out3 <= 12'h3c8;
      14: out3 <= 12'h3c0;
      15: out3 <= 12'h3b7;
      16: out3 <= 12'h3ad;
      17: out3 <= 12'h3a3;
      18: out3 <= 12'h398;
      19: out3 <= 12'h38d;
      20: out3 <= 12'h381;
      21: out3 <= 12'h375;
      22: out3 <= 12'h368;
      23: out3 <= 12'h35a;
      24: out3 <= 12'h34c;
      25: out3 <= 12'h33e;
      26: out3 <= 12'h32f;
      27: out3 <= 12'h31f;
      28: out3 <= 12'h310;
      29: out3 <= 12'h2ff;
      30: out3 <= 12'h2ee;
      31: out3 <= 12'h2dd;
      32: out3 <= 12'h2cb;
      33: out3 <= 12'h2b9;
      34: out3 <= 12'h2a6;
      35: out3 <= 12'h293;
      36: out3 <= 12'h280;
      37: out3 <= 12'h26c;
      38: out3 <= 12'h258;
      39: out3 <= 12'h243;
      40: out3 <= 12'h22e;
      41: out3 <= 12'h219;
      42: out3 <= 12'h204;
      43: out3 <= 12'h1ee;
      44: out3 <= 12'h1d8;
      45: out3 <= 12'h1c1;
      46: out3 <= 12'h1aa;
      47: out3 <= 12'h193;
      48: out3 <= 12'h17c;
      49: out3 <= 12'h165;
      50: out3 <= 12'h14d;
      51: out3 <= 12'h135;
      52: out3 <= 12'h11d;
      53: out3 <= 12'h105;
      54: out3 <= 12'hed;
      55: out3 <= 12'hd4;
      56: out3 <= 12'hbb;
      57: out3 <= 12'ha3;
      58: out3 <= 12'h8a;
      59: out3 <= 12'h71;
      60: out3 <= 12'h58;
      61: out3 <= 12'h3f;
      62: out3 <= 12'h26;
      63: out3 <= 12'hd;
      64: out3 <= 12'hff3;
      65: out3 <= 12'hfda;
      66: out3 <= 12'hfc1;
      67: out3 <= 12'hfa8;
      68: out3 <= 12'hf8f;
      69: out3 <= 12'hf76;
      70: out3 <= 12'hf5d;
      71: out3 <= 12'hf45;
      72: out3 <= 12'hf2c;
      73: out3 <= 12'hf13;
      74: out3 <= 12'hefb;
      75: out3 <= 12'hee3;
      76: out3 <= 12'hecb;
      77: out3 <= 12'heb3;
      78: out3 <= 12'he9b;
      79: out3 <= 12'he84;
      80: out3 <= 12'he6d;
      81: out3 <= 12'he56;
      82: out3 <= 12'he3f;
      83: out3 <= 12'he28;
      84: out3 <= 12'he12;
      85: out3 <= 12'hdfc;
      86: out3 <= 12'hde7;
      87: out3 <= 12'hdd2;
      88: out3 <= 12'hdbd;
      89: out3 <= 12'hda8;
      90: out3 <= 12'hd94;
      91: out3 <= 12'hd80;
      92: out3 <= 12'hd6d;
      93: out3 <= 12'hd5a;
      94: out3 <= 12'hd47;
      95: out3 <= 12'hd35;
      96: out3 <= 12'hd23;
      97: out3 <= 12'hd12;
      98: out3 <= 12'hd01;
      99: out3 <= 12'hcf0;
      100: out3 <= 12'hce1;
      101: out3 <= 12'hcd1;
      102: out3 <= 12'hcc2;
      103: out3 <= 12'hcb4;
      104: out3 <= 12'hca6;
      105: out3 <= 12'hc98;
      106: out3 <= 12'hc8b;
      107: out3 <= 12'hc7f;
      108: out3 <= 12'hc73;
      109: out3 <= 12'hc68;
      110: out3 <= 12'hc5d;
      111: out3 <= 12'hc53;
      112: out3 <= 12'hc49;
      113: out3 <= 12'hc40;
      114: out3 <= 12'hc38;
      115: out3 <= 12'hc30;
      116: out3 <= 12'hc29;
      117: out3 <= 12'hc22;
      118: out3 <= 12'hc1c;
      119: out3 <= 12'hc16;
      120: out3 <= 12'hc11;
      121: out3 <= 12'hc0d;
      122: out3 <= 12'hc09;
      123: out3 <= 12'hc06;
      124: out3 <= 12'hc04;
      125: out3 <= 12'hc02;
      126: out3 <= 12'hc01;
      127: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D17(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hff3;
      1: out3 <= 12'hfda;
      2: out3 <= 12'hfc1;
      3: out3 <= 12'hfa8;
      4: out3 <= 12'hf8f;
      5: out3 <= 12'hf76;
      6: out3 <= 12'hf5d;
      7: out3 <= 12'hf45;
      8: out3 <= 12'hf2c;
      9: out3 <= 12'hf13;
      10: out3 <= 12'hefb;
      11: out3 <= 12'hee3;
      12: out3 <= 12'hecb;
      13: out3 <= 12'heb3;
      14: out3 <= 12'he9b;
      15: out3 <= 12'he84;
      16: out3 <= 12'he6d;
      17: out3 <= 12'he56;
      18: out3 <= 12'he3f;
      19: out3 <= 12'he28;
      20: out3 <= 12'he12;
      21: out3 <= 12'hdfc;
      22: out3 <= 12'hde7;
      23: out3 <= 12'hdd2;
      24: out3 <= 12'hdbd;
      25: out3 <= 12'hda8;
      26: out3 <= 12'hd94;
      27: out3 <= 12'hd80;
      28: out3 <= 12'hd6d;
      29: out3 <= 12'hd5a;
      30: out3 <= 12'hd47;
      31: out3 <= 12'hd35;
      32: out3 <= 12'hd23;
      33: out3 <= 12'hd12;
      34: out3 <= 12'hd01;
      35: out3 <= 12'hcf0;
      36: out3 <= 12'hce1;
      37: out3 <= 12'hcd1;
      38: out3 <= 12'hcc2;
      39: out3 <= 12'hcb4;
      40: out3 <= 12'hca6;
      41: out3 <= 12'hc98;
      42: out3 <= 12'hc8b;
      43: out3 <= 12'hc7f;
      44: out3 <= 12'hc73;
      45: out3 <= 12'hc68;
      46: out3 <= 12'hc5d;
      47: out3 <= 12'hc53;
      48: out3 <= 12'hc49;
      49: out3 <= 12'hc40;
      50: out3 <= 12'hc38;
      51: out3 <= 12'hc30;
      52: out3 <= 12'hc29;
      53: out3 <= 12'hc22;
      54: out3 <= 12'hc1c;
      55: out3 <= 12'hc16;
      56: out3 <= 12'hc11;
      57: out3 <= 12'hc0d;
      58: out3 <= 12'hc09;
      59: out3 <= 12'hc06;
      60: out3 <= 12'hc04;
      61: out3 <= 12'hc02;
      62: out3 <= 12'hc01;
      63: out3 <= 12'hc00;
      64: out3 <= 12'hc00;
      65: out3 <= 12'hc01;
      66: out3 <= 12'hc02;
      67: out3 <= 12'hc04;
      68: out3 <= 12'hc06;
      69: out3 <= 12'hc09;
      70: out3 <= 12'hc0d;
      71: out3 <= 12'hc11;
      72: out3 <= 12'hc16;
      73: out3 <= 12'hc1c;
      74: out3 <= 12'hc22;
      75: out3 <= 12'hc29;
      76: out3 <= 12'hc30;
      77: out3 <= 12'hc38;
      78: out3 <= 12'hc40;
      79: out3 <= 12'hc49;
      80: out3 <= 12'hc53;
      81: out3 <= 12'hc5d;
      82: out3 <= 12'hc68;
      83: out3 <= 12'hc73;
      84: out3 <= 12'hc7f;
      85: out3 <= 12'hc8b;
      86: out3 <= 12'hc98;
      87: out3 <= 12'hca6;
      88: out3 <= 12'hcb4;
      89: out3 <= 12'hcc2;
      90: out3 <= 12'hcd1;
      91: out3 <= 12'hce1;
      92: out3 <= 12'hcf0;
      93: out3 <= 12'hd01;
      94: out3 <= 12'hd12;
      95: out3 <= 12'hd23;
      96: out3 <= 12'hd35;
      97: out3 <= 12'hd47;
      98: out3 <= 12'hd5a;
      99: out3 <= 12'hd6d;
      100: out3 <= 12'hd80;
      101: out3 <= 12'hd94;
      102: out3 <= 12'hda8;
      103: out3 <= 12'hdbd;
      104: out3 <= 12'hdd2;
      105: out3 <= 12'hde7;
      106: out3 <= 12'hdfc;
      107: out3 <= 12'he12;
      108: out3 <= 12'he28;
      109: out3 <= 12'he3f;
      110: out3 <= 12'he56;
      111: out3 <= 12'he6d;
      112: out3 <= 12'he84;
      113: out3 <= 12'he9b;
      114: out3 <= 12'heb3;
      115: out3 <= 12'hecb;
      116: out3 <= 12'hee3;
      117: out3 <= 12'hefb;
      118: out3 <= 12'hf13;
      119: out3 <= 12'hf2c;
      120: out3 <= 12'hf45;
      121: out3 <= 12'hf5d;
      122: out3 <= 12'hf76;
      123: out3 <= 12'hf8f;
      124: out3 <= 12'hfa8;
      125: out3 <= 12'hfc1;
      126: out3 <= 12'hfda;
      127: out3 <= 12'hff3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h400;
      2: out3 <= 12'h400;
      3: out3 <= 12'h3ff;
      4: out3 <= 12'h3fe;
      5: out3 <= 12'h3fe;
      6: out3 <= 12'h3fd;
      7: out3 <= 12'h3fc;
      8: out3 <= 12'h3fa;
      9: out3 <= 12'h3f9;
      10: out3 <= 12'h3f8;
      11: out3 <= 12'h3f6;
      12: out3 <= 12'h3f4;
      13: out3 <= 12'h3f2;
      14: out3 <= 12'h3f0;
      15: out3 <= 12'h3ee;
      16: out3 <= 12'h3eb;
      17: out3 <= 12'h3e8;
      18: out3 <= 12'h3e6;
      19: out3 <= 12'h3e3;
      20: out3 <= 12'h3e0;
      21: out3 <= 12'h3dd;
      22: out3 <= 12'h3d9;
      23: out3 <= 12'h3d6;
      24: out3 <= 12'h3d2;
      25: out3 <= 12'h3ce;
      26: out3 <= 12'h3ca;
      27: out3 <= 12'h3c6;
      28: out3 <= 12'h3c2;
      29: out3 <= 12'h3be;
      30: out3 <= 12'h3b9;
      31: out3 <= 12'h3b4;
      32: out3 <= 12'h3b0;
      33: out3 <= 12'h3ab;
      34: out3 <= 12'h3a6;
      35: out3 <= 12'h3a0;
      36: out3 <= 12'h39b;
      37: out3 <= 12'h395;
      38: out3 <= 12'h390;
      39: out3 <= 12'h38a;
      40: out3 <= 12'h384;
      41: out3 <= 12'h37e;
      42: out3 <= 12'h378;
      43: out3 <= 12'h372;
      44: out3 <= 12'h36b;
      45: out3 <= 12'h364;
      46: out3 <= 12'h35e;
      47: out3 <= 12'h357;
      48: out3 <= 12'h350;
      49: out3 <= 12'h349;
      50: out3 <= 12'h342;
      51: out3 <= 12'h33a;
      52: out3 <= 12'h333;
      53: out3 <= 12'h32b;
      54: out3 <= 12'h323;
      55: out3 <= 12'h31c;
      56: out3 <= 12'h314;
      57: out3 <= 12'h30b;
      58: out3 <= 12'h303;
      59: out3 <= 12'h2fb;
      60: out3 <= 12'h2f3;
      61: out3 <= 12'h2ea;
      62: out3 <= 12'h2e1;
      63: out3 <= 12'h2d9;
      64: out3 <= 12'h2d0;
      65: out3 <= 12'h2c7;
      66: out3 <= 12'h2be;
      67: out3 <= 12'h2b4;
      68: out3 <= 12'h2ab;
      69: out3 <= 12'h2a2;
      70: out3 <= 12'h298;
      71: out3 <= 12'h28e;
      72: out3 <= 12'h285;
      73: out3 <= 12'h27b;
      74: out3 <= 12'h271;
      75: out3 <= 12'h267;
      76: out3 <= 12'h25d;
      77: out3 <= 12'h253;
      78: out3 <= 12'h248;
      79: out3 <= 12'h23e;
      80: out3 <= 12'h234;
      81: out3 <= 12'h229;
      82: out3 <= 12'h21f;
      83: out3 <= 12'h214;
      84: out3 <= 12'h209;
      85: out3 <= 12'h1fe;
      86: out3 <= 12'h1f3;
      87: out3 <= 12'h1e8;
      88: out3 <= 12'h1dd;
      89: out3 <= 12'h1d2;
      90: out3 <= 12'h1c7;
      91: out3 <= 12'h1bb;
      92: out3 <= 12'h1b0;
      93: out3 <= 12'h1a5;
      94: out3 <= 12'h199;
      95: out3 <= 12'h18e;
      96: out3 <= 12'h182;
      97: out3 <= 12'h176;
      98: out3 <= 12'h16b;
      99: out3 <= 12'h15f;
      100: out3 <= 12'h153;
      101: out3 <= 12'h147;
      102: out3 <= 12'h13b;
      103: out3 <= 12'h12f;
      104: out3 <= 12'h123;
      105: out3 <= 12'h117;
      106: out3 <= 12'h10b;
      107: out3 <= 12'hff;
      108: out3 <= 12'hf3;
      109: out3 <= 12'he6;
      110: out3 <= 12'hda;
      111: out3 <= 12'hce;
      112: out3 <= 12'hc2;
      113: out3 <= 12'hb5;
      114: out3 <= 12'ha9;
      115: out3 <= 12'h9c;
      116: out3 <= 12'h90;
      117: out3 <= 12'h84;
      118: out3 <= 12'h77;
      119: out3 <= 12'h6b;
      120: out3 <= 12'h5e;
      121: out3 <= 12'h52;
      122: out3 <= 12'h45;
      123: out3 <= 12'h39;
      124: out3 <= 12'h2c;
      125: out3 <= 12'h1f;
      126: out3 <= 12'h13;
      127: out3 <= 12'h6;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D13(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hfe7;
      2: out3 <= 12'hfce;
      3: out3 <= 12'hfb5;
      4: out3 <= 12'hf9c;
      5: out3 <= 12'hf83;
      6: out3 <= 12'hf6a;
      7: out3 <= 12'hf51;
      8: out3 <= 12'hf38;
      9: out3 <= 12'hf20;
      10: out3 <= 12'hf07;
      11: out3 <= 12'heef;
      12: out3 <= 12'hed7;
      13: out3 <= 12'hebf;
      14: out3 <= 12'hea7;
      15: out3 <= 12'he8f;
      16: out3 <= 12'he78;
      17: out3 <= 12'he61;
      18: out3 <= 12'he4a;
      19: out3 <= 12'he34;
      20: out3 <= 12'he1d;
      21: out3 <= 12'he07;
      22: out3 <= 12'hdf2;
      23: out3 <= 12'hddc;
      24: out3 <= 12'hdc7;
      25: out3 <= 12'hdb2;
      26: out3 <= 12'hd9e;
      27: out3 <= 12'hd8a;
      28: out3 <= 12'hd76;
      29: out3 <= 12'hd63;
      30: out3 <= 12'hd50;
      31: out3 <= 12'hd3e;
      32: out3 <= 12'hd2c;
      33: out3 <= 12'hd1a;
      34: out3 <= 12'hd09;
      35: out3 <= 12'hcf9;
      36: out3 <= 12'hce8;
      37: out3 <= 12'hcd9;
      38: out3 <= 12'hcca;
      39: out3 <= 12'hcbb;
      40: out3 <= 12'hcad;
      41: out3 <= 12'hc9f;
      42: out3 <= 12'hc92;
      43: out3 <= 12'hc85;
      44: out3 <= 12'hc79;
      45: out3 <= 12'hc6d;
      46: out3 <= 12'hc62;
      47: out3 <= 12'hc58;
      48: out3 <= 12'hc4e;
      49: out3 <= 12'hc45;
      50: out3 <= 12'hc3c;
      51: out3 <= 12'hc34;
      52: out3 <= 12'hc2c;
      53: out3 <= 12'hc25;
      54: out3 <= 12'hc1f;
      55: out3 <= 12'hc19;
      56: out3 <= 12'hc14;
      57: out3 <= 12'hc0f;
      58: out3 <= 12'hc0b;
      59: out3 <= 12'hc08;
      60: out3 <= 12'hc05;
      61: out3 <= 12'hc03;
      62: out3 <= 12'hc01;
      63: out3 <= 12'hc00;
      64: out3 <= 12'hc00;
      65: out3 <= 12'hc00;
      66: out3 <= 12'hc01;
      67: out3 <= 12'hc03;
      68: out3 <= 12'hc05;
      69: out3 <= 12'hc08;
      70: out3 <= 12'hc0b;
      71: out3 <= 12'hc0f;
      72: out3 <= 12'hc14;
      73: out3 <= 12'hc19;
      74: out3 <= 12'hc1f;
      75: out3 <= 12'hc25;
      76: out3 <= 12'hc2c;
      77: out3 <= 12'hc34;
      78: out3 <= 12'hc3c;
      79: out3 <= 12'hc45;
      80: out3 <= 12'hc4e;
      81: out3 <= 12'hc58;
      82: out3 <= 12'hc62;
      83: out3 <= 12'hc6d;
      84: out3 <= 12'hc79;
      85: out3 <= 12'hc85;
      86: out3 <= 12'hc92;
      87: out3 <= 12'hc9f;
      88: out3 <= 12'hcad;
      89: out3 <= 12'hcbb;
      90: out3 <= 12'hcca;
      91: out3 <= 12'hcd9;
      92: out3 <= 12'hce8;
      93: out3 <= 12'hcf9;
      94: out3 <= 12'hd09;
      95: out3 <= 12'hd1a;
      96: out3 <= 12'hd2c;
      97: out3 <= 12'hd3e;
      98: out3 <= 12'hd50;
      99: out3 <= 12'hd63;
      100: out3 <= 12'hd76;
      101: out3 <= 12'hd8a;
      102: out3 <= 12'hd9e;
      103: out3 <= 12'hdb2;
      104: out3 <= 12'hdc7;
      105: out3 <= 12'hddc;
      106: out3 <= 12'hdf2;
      107: out3 <= 12'he07;
      108: out3 <= 12'he1d;
      109: out3 <= 12'he34;
      110: out3 <= 12'he4a;
      111: out3 <= 12'he61;
      112: out3 <= 12'he78;
      113: out3 <= 12'he8f;
      114: out3 <= 12'hea7;
      115: out3 <= 12'hebf;
      116: out3 <= 12'hed7;
      117: out3 <= 12'heef;
      118: out3 <= 12'hf07;
      119: out3 <= 12'hf20;
      120: out3 <= 12'hf38;
      121: out3 <= 12'hf51;
      122: out3 <= 12'hf6a;
      123: out3 <= 12'hf83;
      124: out3 <= 12'hf9c;
      125: out3 <= 12'hfb5;
      126: out3 <= 12'hfce;
      127: out3 <= 12'hfe7;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h400;
      2: out3 <= 12'h400;
      3: out3 <= 12'h3ff;
      4: out3 <= 12'h3ff;
      5: out3 <= 12'h3fe;
      6: out3 <= 12'h3fd;
      7: out3 <= 12'h3fc;
      8: out3 <= 12'h3fb;
      9: out3 <= 12'h3fa;
      10: out3 <= 12'h3f8;
      11: out3 <= 12'h3f7;
      12: out3 <= 12'h3f5;
      13: out3 <= 12'h3f3;
      14: out3 <= 12'h3f1;
      15: out3 <= 12'h3ef;
      16: out3 <= 12'h3ec;
      17: out3 <= 12'h3ea;
      18: out3 <= 12'h3e7;
      19: out3 <= 12'h3e4;
      20: out3 <= 12'h3e1;
      21: out3 <= 12'h3de;
      22: out3 <= 12'h3db;
      23: out3 <= 12'h3d7;
      24: out3 <= 12'h3d4;
      25: out3 <= 12'h3d0;
      26: out3 <= 12'h3cc;
      27: out3 <= 12'h3c8;
      28: out3 <= 12'h3c4;
      29: out3 <= 12'h3c0;
      30: out3 <= 12'h3bb;
      31: out3 <= 12'h3b7;
      32: out3 <= 12'h3b2;
      33: out3 <= 12'h3ad;
      34: out3 <= 12'h3a8;
      35: out3 <= 12'h3a3;
      36: out3 <= 12'h39e;
      37: out3 <= 12'h398;
      38: out3 <= 12'h393;
      39: out3 <= 12'h38d;
      40: out3 <= 12'h387;
      41: out3 <= 12'h381;
      42: out3 <= 12'h37b;
      43: out3 <= 12'h375;
      44: out3 <= 12'h36e;
      45: out3 <= 12'h368;
      46: out3 <= 12'h361;
      47: out3 <= 12'h35a;
      48: out3 <= 12'h353;
      49: out3 <= 12'h34c;
      50: out3 <= 12'h345;
      51: out3 <= 12'h33e;
      52: out3 <= 12'h336;
      53: out3 <= 12'h32f;
      54: out3 <= 12'h327;
      55: out3 <= 12'h31f;
      56: out3 <= 12'h318;
      57: out3 <= 12'h310;
      58: out3 <= 12'h307;
      59: out3 <= 12'h2ff;
      60: out3 <= 12'h2f7;
      61: out3 <= 12'h2ee;
      62: out3 <= 12'h2e6;
      63: out3 <= 12'h2dd;
      64: out3 <= 12'h2d4;
      65: out3 <= 12'h2cb;
      66: out3 <= 12'h2c2;
      67: out3 <= 12'h2b9;
      68: out3 <= 12'h2b0;
      69: out3 <= 12'h2a6;
      70: out3 <= 12'h29d;
      71: out3 <= 12'h293;
      72: out3 <= 12'h28a;
      73: out3 <= 12'h280;
      74: out3 <= 12'h276;
      75: out3 <= 12'h26c;
      76: out3 <= 12'h262;
      77: out3 <= 12'h258;
      78: out3 <= 12'h24e;
      79: out3 <= 12'h243;
      80: out3 <= 12'h239;
      81: out3 <= 12'h22e;
      82: out3 <= 12'h224;
      83: out3 <= 12'h219;
      84: out3 <= 12'h20e;
      85: out3 <= 12'h204;
      86: out3 <= 12'h1f9;
      87: out3 <= 12'h1ee;
      88: out3 <= 12'h1e3;
      89: out3 <= 12'h1d8;
      90: out3 <= 12'h1cc;
      91: out3 <= 12'h1c1;
      92: out3 <= 12'h1b6;
      93: out3 <= 12'h1aa;
      94: out3 <= 12'h19f;
      95: out3 <= 12'h193;
      96: out3 <= 12'h188;
      97: out3 <= 12'h17c;
      98: out3 <= 12'h171;
      99: out3 <= 12'h165;
      100: out3 <= 12'h159;
      101: out3 <= 12'h14d;
      102: out3 <= 12'h141;
      103: out3 <= 12'h135;
      104: out3 <= 12'h129;
      105: out3 <= 12'h11d;
      106: out3 <= 12'h111;
      107: out3 <= 12'h105;
      108: out3 <= 12'hf9;
      109: out3 <= 12'hed;
      110: out3 <= 12'he0;
      111: out3 <= 12'hd4;
      112: out3 <= 12'hc8;
      113: out3 <= 12'hbb;
      114: out3 <= 12'haf;
      115: out3 <= 12'ha3;
      116: out3 <= 12'h96;
      117: out3 <= 12'h8a;
      118: out3 <= 12'h7d;
      119: out3 <= 12'h71;
      120: out3 <= 12'h64;
      121: out3 <= 12'h58;
      122: out3 <= 12'h4b;
      123: out3 <= 12'h3f;
      124: out3 <= 12'h32;
      125: out3 <= 12'h26;
      126: out3 <= 12'h19;
      127: out3 <= 12'hd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'hffa;
      1: out3 <= 12'hfed;
      2: out3 <= 12'hfe1;
      3: out3 <= 12'hfd4;
      4: out3 <= 12'hfc7;
      5: out3 <= 12'hfbb;
      6: out3 <= 12'hfae;
      7: out3 <= 12'hfa2;
      8: out3 <= 12'hf95;
      9: out3 <= 12'hf89;
      10: out3 <= 12'hf7c;
      11: out3 <= 12'hf70;
      12: out3 <= 12'hf64;
      13: out3 <= 12'hf57;
      14: out3 <= 12'hf4b;
      15: out3 <= 12'hf3e;
      16: out3 <= 12'hf32;
      17: out3 <= 12'hf26;
      18: out3 <= 12'hf1a;
      19: out3 <= 12'hf0d;
      20: out3 <= 12'hf01;
      21: out3 <= 12'hef5;
      22: out3 <= 12'hee9;
      23: out3 <= 12'hedd;
      24: out3 <= 12'hed1;
      25: out3 <= 12'hec5;
      26: out3 <= 12'heb9;
      27: out3 <= 12'head;
      28: out3 <= 12'hea1;
      29: out3 <= 12'he95;
      30: out3 <= 12'he8a;
      31: out3 <= 12'he7e;
      32: out3 <= 12'he72;
      33: out3 <= 12'he67;
      34: out3 <= 12'he5b;
      35: out3 <= 12'he50;
      36: out3 <= 12'he45;
      37: out3 <= 12'he39;
      38: out3 <= 12'he2e;
      39: out3 <= 12'he23;
      40: out3 <= 12'he18;
      41: out3 <= 12'he0d;
      42: out3 <= 12'he02;
      43: out3 <= 12'hdf7;
      44: out3 <= 12'hdec;
      45: out3 <= 12'hde1;
      46: out3 <= 12'hdd7;
      47: out3 <= 12'hdcc;
      48: out3 <= 12'hdc2;
      49: out3 <= 12'hdb8;
      50: out3 <= 12'hdad;
      51: out3 <= 12'hda3;
      52: out3 <= 12'hd99;
      53: out3 <= 12'hd8f;
      54: out3 <= 12'hd85;
      55: out3 <= 12'hd7b;
      56: out3 <= 12'hd72;
      57: out3 <= 12'hd68;
      58: out3 <= 12'hd5e;
      59: out3 <= 12'hd55;
      60: out3 <= 12'hd4c;
      61: out3 <= 12'hd42;
      62: out3 <= 12'hd39;
      63: out3 <= 12'hd30;
      64: out3 <= 12'hd27;
      65: out3 <= 12'hd1f;
      66: out3 <= 12'hd16;
      67: out3 <= 12'hd0d;
      68: out3 <= 12'hd05;
      69: out3 <= 12'hcfd;
      70: out3 <= 12'hcf5;
      71: out3 <= 12'hcec;
      72: out3 <= 12'hce4;
      73: out3 <= 12'hcdd;
      74: out3 <= 12'hcd5;
      75: out3 <= 12'hccd;
      76: out3 <= 12'hcc6;
      77: out3 <= 12'hcbe;
      78: out3 <= 12'hcb7;
      79: out3 <= 12'hcb0;
      80: out3 <= 12'hca9;
      81: out3 <= 12'hca2;
      82: out3 <= 12'hc9c;
      83: out3 <= 12'hc95;
      84: out3 <= 12'hc8e;
      85: out3 <= 12'hc88;
      86: out3 <= 12'hc82;
      87: out3 <= 12'hc7c;
      88: out3 <= 12'hc76;
      89: out3 <= 12'hc70;
      90: out3 <= 12'hc6b;
      91: out3 <= 12'hc65;
      92: out3 <= 12'hc60;
      93: out3 <= 12'hc5a;
      94: out3 <= 12'hc55;
      95: out3 <= 12'hc50;
      96: out3 <= 12'hc4c;
      97: out3 <= 12'hc47;
      98: out3 <= 12'hc42;
      99: out3 <= 12'hc3e;
      100: out3 <= 12'hc3a;
      101: out3 <= 12'hc36;
      102: out3 <= 12'hc32;
      103: out3 <= 12'hc2e;
      104: out3 <= 12'hc2a;
      105: out3 <= 12'hc27;
      106: out3 <= 12'hc23;
      107: out3 <= 12'hc20;
      108: out3 <= 12'hc1d;
      109: out3 <= 12'hc1a;
      110: out3 <= 12'hc18;
      111: out3 <= 12'hc15;
      112: out3 <= 12'hc12;
      113: out3 <= 12'hc10;
      114: out3 <= 12'hc0e;
      115: out3 <= 12'hc0c;
      116: out3 <= 12'hc0a;
      117: out3 <= 12'hc08;
      118: out3 <= 12'hc07;
      119: out3 <= 12'hc06;
      120: out3 <= 12'hc04;
      121: out3 <= 12'hc03;
      122: out3 <= 12'hc02;
      123: out3 <= 12'hc02;
      124: out3 <= 12'hc01;
      125: out3 <= 12'hc00;
      126: out3 <= 12'hc00;
      127: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h0;
      1: out3 <= 12'hfda;
      2: out3 <= 12'hfb5;
      3: out3 <= 12'hf8f;
      4: out3 <= 12'hf6a;
      5: out3 <= 12'hf45;
      6: out3 <= 12'hf20;
      7: out3 <= 12'hefb;
      8: out3 <= 12'hed7;
      9: out3 <= 12'heb3;
      10: out3 <= 12'he8f;
      11: out3 <= 12'he6d;
      12: out3 <= 12'he4a;
      13: out3 <= 12'he28;
      14: out3 <= 12'he07;
      15: out3 <= 12'hde7;
      16: out3 <= 12'hdc7;
      17: out3 <= 12'hda8;
      18: out3 <= 12'hd8a;
      19: out3 <= 12'hd6d;
      20: out3 <= 12'hd50;
      21: out3 <= 12'hd35;
      22: out3 <= 12'hd1a;
      23: out3 <= 12'hd01;
      24: out3 <= 12'hce8;
      25: out3 <= 12'hcd1;
      26: out3 <= 12'hcbb;
      27: out3 <= 12'hca6;
      28: out3 <= 12'hc92;
      29: out3 <= 12'hc7f;
      30: out3 <= 12'hc6d;
      31: out3 <= 12'hc5d;
      32: out3 <= 12'hc4e;
      33: out3 <= 12'hc40;
      34: out3 <= 12'hc34;
      35: out3 <= 12'hc29;
      36: out3 <= 12'hc1f;
      37: out3 <= 12'hc16;
      38: out3 <= 12'hc0f;
      39: out3 <= 12'hc09;
      40: out3 <= 12'hc05;
      41: out3 <= 12'hc02;
      42: out3 <= 12'hc00;
      43: out3 <= 12'hc00;
      44: out3 <= 12'hc01;
      45: out3 <= 12'hc04;
      46: out3 <= 12'hc08;
      47: out3 <= 12'hc0d;
      48: out3 <= 12'hc14;
      49: out3 <= 12'hc1c;
      50: out3 <= 12'hc25;
      51: out3 <= 12'hc30;
      52: out3 <= 12'hc3c;
      53: out3 <= 12'hc49;
      54: out3 <= 12'hc58;
      55: out3 <= 12'hc68;
      56: out3 <= 12'hc79;
      57: out3 <= 12'hc8b;
      58: out3 <= 12'hc9f;
      59: out3 <= 12'hcb4;
      60: out3 <= 12'hcca;
      61: out3 <= 12'hce1;
      62: out3 <= 12'hcf9;
      63: out3 <= 12'hd12;
      64: out3 <= 12'hd2c;
      65: out3 <= 12'hd47;
      66: out3 <= 12'hd63;
      67: out3 <= 12'hd80;
      68: out3 <= 12'hd9e;
      69: out3 <= 12'hdbd;
      70: out3 <= 12'hddc;
      71: out3 <= 12'hdfc;
      72: out3 <= 12'he1d;
      73: out3 <= 12'he3f;
      74: out3 <= 12'he61;
      75: out3 <= 12'he84;
      76: out3 <= 12'hea7;
      77: out3 <= 12'hecb;
      78: out3 <= 12'heef;
      79: out3 <= 12'hf13;
      80: out3 <= 12'hf38;
      81: out3 <= 12'hf5d;
      82: out3 <= 12'hf83;
      83: out3 <= 12'hfa8;
      84: out3 <= 12'hfce;
      85: out3 <= 12'hff3;
      86: out3 <= 12'h19;
      87: out3 <= 12'h3f;
      88: out3 <= 12'h64;
      89: out3 <= 12'h8a;
      90: out3 <= 12'haf;
      91: out3 <= 12'hd4;
      92: out3 <= 12'hf9;
      93: out3 <= 12'h11d;
      94: out3 <= 12'h141;
      95: out3 <= 12'h165;
      96: out3 <= 12'h188;
      97: out3 <= 12'h1aa;
      98: out3 <= 12'h1cc;
      99: out3 <= 12'h1ee;
      100: out3 <= 12'h20e;
      101: out3 <= 12'h22e;
      102: out3 <= 12'h24e;
      103: out3 <= 12'h26c;
      104: out3 <= 12'h28a;
      105: out3 <= 12'h2a6;
      106: out3 <= 12'h2c2;
      107: out3 <= 12'h2dd;
      108: out3 <= 12'h2f7;
      109: out3 <= 12'h310;
      110: out3 <= 12'h327;
      111: out3 <= 12'h33e;
      112: out3 <= 12'h353;
      113: out3 <= 12'h368;
      114: out3 <= 12'h37b;
      115: out3 <= 12'h38d;
      116: out3 <= 12'h39e;
      117: out3 <= 12'h3ad;
      118: out3 <= 12'h3bb;
      119: out3 <= 12'h3c8;
      120: out3 <= 12'h3d4;
      121: out3 <= 12'h3de;
      122: out3 <= 12'h3e7;
      123: out3 <= 12'h3ef;
      124: out3 <= 12'h3f5;
      125: out3 <= 12'h3fa;
      126: out3 <= 12'h3fd;
      127: out3 <= 12'h3ff;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D5(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h400;
      2: out3 <= 12'h3ff;
      3: out3 <= 12'h3fd;
      4: out3 <= 12'h3fb;
      5: out3 <= 12'h3f8;
      6: out3 <= 12'h3f5;
      7: out3 <= 12'h3f1;
      8: out3 <= 12'h3ec;
      9: out3 <= 12'h3e7;
      10: out3 <= 12'h3e1;
      11: out3 <= 12'h3db;
      12: out3 <= 12'h3d4;
      13: out3 <= 12'h3cc;
      14: out3 <= 12'h3c4;
      15: out3 <= 12'h3bb;
      16: out3 <= 12'h3b2;
      17: out3 <= 12'h3a8;
      18: out3 <= 12'h39e;
      19: out3 <= 12'h393;
      20: out3 <= 12'h387;
      21: out3 <= 12'h37b;
      22: out3 <= 12'h36e;
      23: out3 <= 12'h361;
      24: out3 <= 12'h353;
      25: out3 <= 12'h345;
      26: out3 <= 12'h336;
      27: out3 <= 12'h327;
      28: out3 <= 12'h318;
      29: out3 <= 12'h307;
      30: out3 <= 12'h2f7;
      31: out3 <= 12'h2e6;
      32: out3 <= 12'h2d4;
      33: out3 <= 12'h2c2;
      34: out3 <= 12'h2b0;
      35: out3 <= 12'h29d;
      36: out3 <= 12'h28a;
      37: out3 <= 12'h276;
      38: out3 <= 12'h262;
      39: out3 <= 12'h24e;
      40: out3 <= 12'h239;
      41: out3 <= 12'h224;
      42: out3 <= 12'h20e;
      43: out3 <= 12'h1f9;
      44: out3 <= 12'h1e3;
      45: out3 <= 12'h1cc;
      46: out3 <= 12'h1b6;
      47: out3 <= 12'h19f;
      48: out3 <= 12'h188;
      49: out3 <= 12'h171;
      50: out3 <= 12'h159;
      51: out3 <= 12'h141;
      52: out3 <= 12'h129;
      53: out3 <= 12'h111;
      54: out3 <= 12'hf9;
      55: out3 <= 12'he0;
      56: out3 <= 12'hc8;
      57: out3 <= 12'haf;
      58: out3 <= 12'h96;
      59: out3 <= 12'h7d;
      60: out3 <= 12'h64;
      61: out3 <= 12'h4b;
      62: out3 <= 12'h32;
      63: out3 <= 12'h19;
      64: out3 <= 12'h0;
      65: out3 <= 12'hfe7;
      66: out3 <= 12'hfce;
      67: out3 <= 12'hfb5;
      68: out3 <= 12'hf9c;
      69: out3 <= 12'hf83;
      70: out3 <= 12'hf6a;
      71: out3 <= 12'hf51;
      72: out3 <= 12'hf38;
      73: out3 <= 12'hf20;
      74: out3 <= 12'hf07;
      75: out3 <= 12'heef;
      76: out3 <= 12'hed7;
      77: out3 <= 12'hebf;
      78: out3 <= 12'hea7;
      79: out3 <= 12'he8f;
      80: out3 <= 12'he78;
      81: out3 <= 12'he61;
      82: out3 <= 12'he4a;
      83: out3 <= 12'he34;
      84: out3 <= 12'he1d;
      85: out3 <= 12'he07;
      86: out3 <= 12'hdf2;
      87: out3 <= 12'hddc;
      88: out3 <= 12'hdc7;
      89: out3 <= 12'hdb2;
      90: out3 <= 12'hd9e;
      91: out3 <= 12'hd8a;
      92: out3 <= 12'hd76;
      93: out3 <= 12'hd63;
      94: out3 <= 12'hd50;
      95: out3 <= 12'hd3e;
      96: out3 <= 12'hd2c;
      97: out3 <= 12'hd1a;
      98: out3 <= 12'hd09;
      99: out3 <= 12'hcf9;
      100: out3 <= 12'hce8;
      101: out3 <= 12'hcd9;
      102: out3 <= 12'hcca;
      103: out3 <= 12'hcbb;
      104: out3 <= 12'hcad;
      105: out3 <= 12'hc9f;
      106: out3 <= 12'hc92;
      107: out3 <= 12'hc85;
      108: out3 <= 12'hc79;
      109: out3 <= 12'hc6d;
      110: out3 <= 12'hc62;
      111: out3 <= 12'hc58;
      112: out3 <= 12'hc4e;
      113: out3 <= 12'hc45;
      114: out3 <= 12'hc3c;
      115: out3 <= 12'hc34;
      116: out3 <= 12'hc2c;
      117: out3 <= 12'hc25;
      118: out3 <= 12'hc1f;
      119: out3 <= 12'hc19;
      120: out3 <= 12'hc14;
      121: out3 <= 12'hc0f;
      122: out3 <= 12'hc0b;
      123: out3 <= 12'hc08;
      124: out3 <= 12'hc05;
      125: out3 <= 12'hc03;
      126: out3 <= 12'hc01;
      127: out3 <= 12'hc00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6(addr, out, clk);
   input clk;
   output [11:0] out;
   reg [11:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 12'h400;
      1: out3 <= 12'h3ff;
      2: out3 <= 12'h3fd;
      3: out3 <= 12'h3fa;
      4: out3 <= 12'h3f5;
      5: out3 <= 12'h3ef;
      6: out3 <= 12'h3e7;
      7: out3 <= 12'h3de;
      8: out3 <= 12'h3d4;
      9: out3 <= 12'h3c8;
      10: out3 <= 12'h3bb;
      11: out3 <= 12'h3ad;
      12: out3 <= 12'h39e;
      13: out3 <= 12'h38d;
      14: out3 <= 12'h37b;
      15: out3 <= 12'h368;
      16: out3 <= 12'h353;
      17: out3 <= 12'h33e;
      18: out3 <= 12'h327;
      19: out3 <= 12'h310;
      20: out3 <= 12'h2f7;
      21: out3 <= 12'h2dd;
      22: out3 <= 12'h2c2;
      23: out3 <= 12'h2a6;
      24: out3 <= 12'h28a;
      25: out3 <= 12'h26c;
      26: out3 <= 12'h24e;
      27: out3 <= 12'h22e;
      28: out3 <= 12'h20e;
      29: out3 <= 12'h1ee;
      30: out3 <= 12'h1cc;
      31: out3 <= 12'h1aa;
      32: out3 <= 12'h188;
      33: out3 <= 12'h165;
      34: out3 <= 12'h141;
      35: out3 <= 12'h11d;
      36: out3 <= 12'hf9;
      37: out3 <= 12'hd4;
      38: out3 <= 12'haf;
      39: out3 <= 12'h8a;
      40: out3 <= 12'h64;
      41: out3 <= 12'h3f;
      42: out3 <= 12'h19;
      43: out3 <= 12'hff3;
      44: out3 <= 12'hfce;
      45: out3 <= 12'hfa8;
      46: out3 <= 12'hf83;
      47: out3 <= 12'hf5d;
      48: out3 <= 12'hf38;
      49: out3 <= 12'hf13;
      50: out3 <= 12'heef;
      51: out3 <= 12'hecb;
      52: out3 <= 12'hea7;
      53: out3 <= 12'he84;
      54: out3 <= 12'he61;
      55: out3 <= 12'he3f;
      56: out3 <= 12'he1d;
      57: out3 <= 12'hdfc;
      58: out3 <= 12'hddc;
      59: out3 <= 12'hdbd;
      60: out3 <= 12'hd9e;
      61: out3 <= 12'hd80;
      62: out3 <= 12'hd63;
      63: out3 <= 12'hd47;
      64: out3 <= 12'hd2c;
      65: out3 <= 12'hd12;
      66: out3 <= 12'hcf9;
      67: out3 <= 12'hce1;
      68: out3 <= 12'hcca;
      69: out3 <= 12'hcb4;
      70: out3 <= 12'hc9f;
      71: out3 <= 12'hc8b;
      72: out3 <= 12'hc79;
      73: out3 <= 12'hc68;
      74: out3 <= 12'hc58;
      75: out3 <= 12'hc49;
      76: out3 <= 12'hc3c;
      77: out3 <= 12'hc30;
      78: out3 <= 12'hc25;
      79: out3 <= 12'hc1c;
      80: out3 <= 12'hc14;
      81: out3 <= 12'hc0d;
      82: out3 <= 12'hc08;
      83: out3 <= 12'hc04;
      84: out3 <= 12'hc01;
      85: out3 <= 12'hc00;
      86: out3 <= 12'hc00;
      87: out3 <= 12'hc02;
      88: out3 <= 12'hc05;
      89: out3 <= 12'hc09;
      90: out3 <= 12'hc0f;
      91: out3 <= 12'hc16;
      92: out3 <= 12'hc1f;
      93: out3 <= 12'hc29;
      94: out3 <= 12'hc34;
      95: out3 <= 12'hc40;
      96: out3 <= 12'hc4e;
      97: out3 <= 12'hc5d;
      98: out3 <= 12'hc6d;
      99: out3 <= 12'hc7f;
      100: out3 <= 12'hc92;
      101: out3 <= 12'hca6;
      102: out3 <= 12'hcbb;
      103: out3 <= 12'hcd1;
      104: out3 <= 12'hce8;
      105: out3 <= 12'hd01;
      106: out3 <= 12'hd1a;
      107: out3 <= 12'hd35;
      108: out3 <= 12'hd50;
      109: out3 <= 12'hd6d;
      110: out3 <= 12'hd8a;
      111: out3 <= 12'hda8;
      112: out3 <= 12'hdc7;
      113: out3 <= 12'hde7;
      114: out3 <= 12'he07;
      115: out3 <= 12'he28;
      116: out3 <= 12'he4a;
      117: out3 <= 12'he6d;
      118: out3 <= 12'he8f;
      119: out3 <= 12'heb3;
      120: out3 <= 12'hed7;
      121: out3 <= 12'hefb;
      122: out3 <= 12'hf20;
      123: out3 <= 12'hf45;
      124: out3 <= 12'hf6a;
      125: out3 <= 12'hf8f;
      126: out3 <= 12'hfb5;
      127: out3 <= 12'hfda;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock18717(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_25117(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a209;
   wire signed [11:0] a162;
   wire signed [11:0] a212;
   wire signed [11:0] a166;
   wire signed [11:0] a213;
   wire signed [11:0] a214;
   wire signed [11:0] a217;
   wire signed [11:0] a218;
   wire signed [11:0] a221;
   wire signed [11:0] a222;
   wire signed [11:0] a225;
   wire signed [11:0] a186;
   wire signed [11:0] a228;
   wire signed [11:0] a190;
   wire signed [11:0] a229;
   wire signed [11:0] a230;
   wire signed [11:0] a233;
   wire signed [11:0] a234;
   wire signed [11:0] a237;
   wire signed [11:0] a238;
   reg signed [11:0] tm841;
   reg signed [11:0] tm845;
   reg signed [11:0] tm857;
   reg signed [11:0] tm861;
   reg signed [11:0] tm873;
   reg signed [11:0] tm877;
   reg signed [11:0] tm889;
   reg signed [11:0] tm893;
   reg signed [11:0] tm905;
   reg signed [11:0] tm909;
   reg signed [11:0] tm921;
   reg signed [11:0] tm925;
   reg signed [11:0] tm937;
   reg signed [11:0] tm944;
   reg signed [11:0] tm951;
   reg signed [11:0] tm958;
   reg signed [11:0] tm842;
   reg signed [11:0] tm846;
   reg signed [11:0] tm858;
   reg signed [11:0] tm862;
   reg signed [11:0] tm874;
   reg signed [11:0] tm878;
   reg signed [11:0] tm890;
   reg signed [11:0] tm894;
   reg signed [11:0] tm906;
   reg signed [11:0] tm910;
   reg signed [11:0] tm922;
   reg signed [11:0] tm926;
   reg signed [11:0] tm938;
   reg signed [11:0] tm945;
   reg signed [11:0] tm952;
   reg signed [11:0] tm959;
   wire signed [11:0] tm50;
   wire signed [11:0] a167;
   wire signed [11:0] tm51;
   wire signed [11:0] a169;
   wire signed [11:0] tm52;
   wire signed [11:0] a173;
   wire signed [11:0] tm53;
   wire signed [11:0] a175;
   wire signed [11:0] tm54;
   wire signed [11:0] a179;
   wire signed [11:0] tm55;
   wire signed [11:0] a181;
   wire signed [11:0] tm58;
   wire signed [11:0] a191;
   wire signed [11:0] tm59;
   wire signed [11:0] a193;
   wire signed [11:0] tm60;
   wire signed [11:0] a197;
   wire signed [11:0] tm61;
   wire signed [11:0] a199;
   wire signed [11:0] tm62;
   wire signed [11:0] a203;
   wire signed [11:0] tm63;
   wire signed [11:0] a205;
   reg signed [11:0] tm843;
   reg signed [11:0] tm847;
   reg signed [11:0] tm859;
   reg signed [11:0] tm863;
   reg signed [11:0] tm875;
   reg signed [11:0] tm879;
   reg signed [11:0] tm891;
   reg signed [11:0] tm895;
   reg signed [11:0] tm907;
   reg signed [11:0] tm911;
   reg signed [11:0] tm923;
   reg signed [11:0] tm927;
   reg signed [11:0] tm939;
   reg signed [11:0] tm946;
   reg signed [11:0] tm953;
   reg signed [11:0] tm960;
   reg signed [11:0] tm164;
   reg signed [11:0] tm165;
   reg signed [11:0] tm168;
   reg signed [11:0] tm169;
   reg signed [11:0] tm172;
   reg signed [11:0] tm173;
   reg signed [11:0] tm180;
   reg signed [11:0] tm181;
   reg signed [11:0] tm184;
   reg signed [11:0] tm185;
   reg signed [11:0] tm188;
   reg signed [11:0] tm189;
   reg signed [11:0] tm844;
   reg signed [11:0] tm848;
   reg signed [11:0] tm860;
   reg signed [11:0] tm864;
   reg signed [11:0] tm876;
   reg signed [11:0] tm880;
   reg signed [11:0] tm892;
   reg signed [11:0] tm896;
   reg signed [11:0] tm908;
   reg signed [11:0] tm912;
   reg signed [11:0] tm924;
   reg signed [11:0] tm928;
   reg signed [11:0] tm940;
   reg signed [11:0] tm947;
   reg signed [11:0] tm954;
   reg signed [11:0] tm961;
   reg signed [11:0] tm941;
   reg signed [11:0] tm948;
   reg signed [11:0] tm955;
   reg signed [11:0] tm962;
   wire signed [11:0] a168;
   wire signed [11:0] a170;
   wire signed [11:0] a171;
   wire signed [11:0] a172;
   wire signed [11:0] a174;
   wire signed [11:0] a176;
   wire signed [11:0] a177;
   wire signed [11:0] a178;
   wire signed [11:0] a180;
   wire signed [11:0] a182;
   wire signed [11:0] a183;
   wire signed [11:0] a184;
   wire signed [11:0] a192;
   wire signed [11:0] a194;
   wire signed [11:0] a195;
   wire signed [11:0] a196;
   wire signed [11:0] a198;
   wire signed [11:0] a200;
   wire signed [11:0] a201;
   wire signed [11:0] a202;
   wire signed [11:0] a204;
   wire signed [11:0] a206;
   wire signed [11:0] a207;
   wire signed [11:0] a208;
   reg signed [11:0] tm942;
   reg signed [11:0] tm949;
   reg signed [11:0] tm956;
   reg signed [11:0] tm963;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   reg signed [11:0] tm943;
   reg signed [11:0] tm950;
   reg signed [11:0] tm957;
   reg signed [11:0] tm964;


   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a218 = X5;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a234 = X13;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm50;
   assign a169 = tm51;
   assign a173 = tm52;
   assign a175 = tm53;
   assign a179 = tm54;
   assign a181 = tm55;
   assign a191 = tm58;
   assign a193 = tm59;
   assign a197 = tm60;
   assign a199 = tm61;
   assign a203 = tm62;
   assign a205 = tm63;
   assign Y0 = tm943;
   assign Y1 = tm950;
   assign Y8 = tm957;
   assign Y9 = tm964;

   D10 instD10inst0(.addr(i1[6:0]), .out(tm62), .clk(clk));

   D18 instD18inst0(.addr(i1[6:0]), .out(tm63), .clk(clk));

   D12 instD12inst0(.addr(i1[6:0]), .out(tm51), .clk(clk));

   D9 instD9inst0(.addr(i1[6:0]), .out(tm60), .clk(clk));

   D17 instD17inst0(.addr(i1[6:0]), .out(tm61), .clk(clk));

   D8 instD8inst0(.addr(i1[6:0]), .out(tm58), .clk(clk));

   D13 instD13inst0(.addr(i1[6:0]), .out(tm53), .clk(clk));

   D4 instD4inst0(.addr(i1[6:0]), .out(tm50), .clk(clk));

   D16 instD16inst0(.addr(i1[6:0]), .out(tm59), .clk(clk));

   D14 instD14inst0(.addr(i1[6:0]), .out(tm55), .clk(clk));

   D5 instD5inst0(.addr(i1[6:0]), .out(tm52), .clk(clk));

   D6 instD6inst0(.addr(i1[6:0]), .out(tm54), .clk(clk));

    multfix #(12, 2) m18815(.a(tm164), .b(tm844), .clk(clk), .q_sc(a168), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18837(.a(tm165), .b(tm848), .clk(clk), .q_sc(a170), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18854(.a(tm165), .b(tm844), .clk(clk), .q_sc(a171), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18865(.a(tm164), .b(tm848), .clk(clk), .q_sc(a172), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18894(.a(tm168), .b(tm860), .clk(clk), .q_sc(a174), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18916(.a(tm169), .b(tm864), .clk(clk), .q_sc(a176), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18933(.a(tm169), .b(tm860), .clk(clk), .q_sc(a177), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18944(.a(tm168), .b(tm864), .clk(clk), .q_sc(a178), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18973(.a(tm172), .b(tm876), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(12, 2) m18995(.a(tm173), .b(tm880), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19012(.a(tm173), .b(tm876), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19023(.a(tm172), .b(tm880), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19131(.a(tm180), .b(tm892), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19153(.a(tm181), .b(tm896), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19170(.a(tm181), .b(tm892), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19181(.a(tm180), .b(tm896), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19210(.a(tm184), .b(tm908), .clk(clk), .q_sc(a198), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19232(.a(tm185), .b(tm912), .clk(clk), .q_sc(a200), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19249(.a(tm185), .b(tm908), .clk(clk), .q_sc(a201), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19260(.a(tm184), .b(tm912), .clk(clk), .q_sc(a202), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19289(.a(tm188), .b(tm924), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19311(.a(tm189), .b(tm928), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19328(.a(tm189), .b(tm924), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(12, 2) m19339(.a(tm188), .b(tm928), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    subfxp #(12, 1) sub18843(.a(a168), .b(a170), .clk(clk), .q(Y2));    // 6
    addfxp #(12, 1) add18872(.a(a171), .b(a172), .clk(clk), .q(Y3));    // 6
    subfxp #(12, 1) sub18922(.a(a174), .b(a176), .clk(clk), .q(Y4));    // 6
    addfxp #(12, 1) add18951(.a(a177), .b(a178), .clk(clk), .q(Y5));    // 6
    subfxp #(12, 1) sub19001(.a(a180), .b(a182), .clk(clk), .q(Y6));    // 6
    addfxp #(12, 1) add19030(.a(a183), .b(a184), .clk(clk), .q(Y7));    // 6
    subfxp #(12, 1) sub19159(.a(a192), .b(a194), .clk(clk), .q(Y10));    // 6
    addfxp #(12, 1) add19188(.a(a195), .b(a196), .clk(clk), .q(Y11));    // 6
    subfxp #(12, 1) sub19238(.a(a198), .b(a200), .clk(clk), .q(Y12));    // 6
    addfxp #(12, 1) add19267(.a(a201), .b(a202), .clk(clk), .q(Y13));    // 6
    subfxp #(12, 1) sub19317(.a(a204), .b(a206), .clk(clk), .q(Y14));    // 6
    addfxp #(12, 1) add19346(.a(a207), .b(a208), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm164 <= 0;
         tm844 <= 0;
         tm165 <= 0;
         tm848 <= 0;
         tm165 <= 0;
         tm844 <= 0;
         tm164 <= 0;
         tm848 <= 0;
         tm168 <= 0;
         tm860 <= 0;
         tm169 <= 0;
         tm864 <= 0;
         tm169 <= 0;
         tm860 <= 0;
         tm168 <= 0;
         tm864 <= 0;
         tm172 <= 0;
         tm876 <= 0;
         tm173 <= 0;
         tm880 <= 0;
         tm173 <= 0;
         tm876 <= 0;
         tm172 <= 0;
         tm880 <= 0;
         tm180 <= 0;
         tm892 <= 0;
         tm181 <= 0;
         tm896 <= 0;
         tm181 <= 0;
         tm892 <= 0;
         tm180 <= 0;
         tm896 <= 0;
         tm184 <= 0;
         tm908 <= 0;
         tm185 <= 0;
         tm912 <= 0;
         tm185 <= 0;
         tm908 <= 0;
         tm184 <= 0;
         tm912 <= 0;
         tm188 <= 0;
         tm924 <= 0;
         tm189 <= 0;
         tm928 <= 0;
         tm189 <= 0;
         tm924 <= 0;
         tm188 <= 0;
         tm928 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm841 <= a213;
         tm845 <= a214;
         tm857 <= a217;
         tm861 <= a218;
         tm873 <= a221;
         tm877 <= a222;
         tm889 <= a229;
         tm893 <= a230;
         tm905 <= a233;
         tm909 <= a234;
         tm921 <= a237;
         tm925 <= a238;
         tm937 <= a162;
         tm944 <= a166;
         tm951 <= a186;
         tm958 <= a190;
         tm842 <= tm841;
         tm846 <= tm845;
         tm858 <= tm857;
         tm862 <= tm861;
         tm874 <= tm873;
         tm878 <= tm877;
         tm890 <= tm889;
         tm894 <= tm893;
         tm906 <= tm905;
         tm910 <= tm909;
         tm922 <= tm921;
         tm926 <= tm925;
         tm938 <= tm937;
         tm945 <= tm944;
         tm952 <= tm951;
         tm959 <= tm958;
         tm843 <= tm842;
         tm847 <= tm846;
         tm859 <= tm858;
         tm863 <= tm862;
         tm875 <= tm874;
         tm879 <= tm878;
         tm891 <= tm890;
         tm895 <= tm894;
         tm907 <= tm906;
         tm911 <= tm910;
         tm923 <= tm922;
         tm927 <= tm926;
         tm939 <= tm938;
         tm946 <= tm945;
         tm953 <= tm952;
         tm960 <= tm959;
         tm164 <= a167;
         tm165 <= a169;
         tm168 <= a173;
         tm169 <= a175;
         tm172 <= a179;
         tm173 <= a181;
         tm180 <= a191;
         tm181 <= a193;
         tm184 <= a197;
         tm185 <= a199;
         tm188 <= a203;
         tm189 <= a205;
         tm844 <= tm843;
         tm848 <= tm847;
         tm860 <= tm859;
         tm864 <= tm863;
         tm876 <= tm875;
         tm880 <= tm879;
         tm892 <= tm891;
         tm896 <= tm895;
         tm908 <= tm907;
         tm912 <= tm911;
         tm924 <= tm923;
         tm928 <= tm927;
         tm940 <= tm939;
         tm947 <= tm946;
         tm954 <= tm953;
         tm961 <= tm960;
         tm941 <= tm940;
         tm948 <= tm947;
         tm955 <= tm954;
         tm962 <= tm961;
         tm942 <= tm941;
         tm949 <= tm948;
         tm956 <= tm955;
         tm963 <= tm962;
         tm943 <= tm942;
         tm950 <= tm949;
         tm957 <= tm956;
         tm964 <= tm963;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock21418(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [11:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(2, 1) shiftFIFO_25120(.X(next), .Y(next_out), .clk(clk));


   wire signed [11:0] a33;
   wire signed [11:0] a34;
   wire signed [11:0] a35;
   wire signed [11:0] a36;
   wire signed [11:0] a41;
   wire signed [11:0] a42;
   wire signed [11:0] a43;
   wire signed [11:0] a44;
   wire signed [11:0] a49;
   wire signed [11:0] a50;
   wire signed [11:0] a51;
   wire signed [11:0] a52;
   wire signed [11:0] a57;
   wire signed [11:0] a58;
   wire signed [11:0] a59;
   wire signed [11:0] a60;
   wire signed [12:0] tm437;
   wire signed [12:0] tm438;
   wire signed [12:0] tm439;
   wire signed [12:0] tm440;
   wire signed [12:0] tm441;
   wire signed [12:0] tm442;
   wire signed [12:0] tm443;
   wire signed [12:0] tm444;
   wire signed [12:0] tm453;
   wire signed [12:0] tm454;
   wire signed [12:0] tm455;
   wire signed [12:0] tm456;
   wire signed [12:0] tm457;
   wire signed [12:0] tm458;
   wire signed [12:0] tm459;
   wire signed [12:0] tm460;
   wire signed [11:0] t209;
   wire signed [11:0] t210;
   wire signed [11:0] t211;
   wire signed [11:0] t212;
   wire signed [11:0] t213;
   wire signed [11:0] t214;
   wire signed [11:0] t215;
   wire signed [11:0] t216;
   wire signed [11:0] t225;
   wire signed [11:0] t226;
   wire signed [11:0] t227;
   wire signed [11:0] t228;
   wire signed [11:0] t229;
   wire signed [11:0] t230;
   wire signed [11:0] t231;
   wire signed [11:0] t232;
   wire signed [12:0] tm445;
   wire signed [12:0] tm446;
   wire signed [12:0] tm447;
   wire signed [12:0] tm448;
   wire signed [11:0] Y0;
   wire signed [11:0] Y1;
   wire signed [11:0] Y4;
   wire signed [11:0] Y5;
   wire signed [12:0] tm449;
   wire signed [12:0] tm450;
   wire signed [12:0] tm451;
   wire signed [12:0] tm452;
   wire signed [11:0] Y2;
   wire signed [11:0] Y3;
   wire signed [11:0] Y6;
   wire signed [11:0] Y7;
   wire signed [12:0] tm461;
   wire signed [12:0] tm462;
   wire signed [12:0] tm463;
   wire signed [12:0] tm464;
   wire signed [11:0] Y8;
   wire signed [11:0] Y9;
   wire signed [11:0] Y12;
   wire signed [11:0] Y13;
   wire signed [12:0] tm465;
   wire signed [12:0] tm466;
   wire signed [12:0] tm467;
   wire signed [12:0] tm468;
   wire signed [11:0] Y10;
   wire signed [11:0] Y11;
   wire signed [11:0] Y14;
   wire signed [11:0] Y15;
   wire signed [11:0] t217;
   wire signed [11:0] t218;
   wire signed [11:0] t219;
   wire signed [11:0] t220;
   wire signed [11:0] t221;
   wire signed [11:0] t222;
   wire signed [11:0] t223;
   wire signed [11:0] t224;
   wire signed [11:0] t233;
   wire signed [11:0] t234;
   wire signed [11:0] t235;
   wire signed [11:0] t236;
   wire signed [11:0] t237;
   wire signed [11:0] t238;
   wire signed [11:0] t239;
   wire signed [11:0] t240;


   assign a33 = X0;
   assign a34 = X4;
   assign a35 = X1;
   assign a36 = X5;
   assign a41 = X2;
   assign a42 = X6;
   assign a43 = X3;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X12;
   assign a51 = X9;
   assign a52 = X13;
   assign a57 = X10;
   assign a58 = X14;
   assign a59 = X11;
   assign a60 = X15;
   assign t209 = tm437[12:1];
   assign t210 = tm438[12:1];
   assign t211 = tm439[12:1];
   assign t212 = tm440[12:1];
   assign t213 = tm441[12:1];
   assign t214 = tm442[12:1];
   assign t215 = tm443[12:1];
   assign t216 = tm444[12:1];
   assign t225 = tm453[12:1];
   assign t226 = tm454[12:1];
   assign t227 = tm455[12:1];
   assign t228 = tm456[12:1];
   assign t229 = tm457[12:1];
   assign t230 = tm458[12:1];
   assign t231 = tm459[12:1];
   assign t232 = tm460[12:1];
   assign Y0 = t217;
   assign Y1 = t218;
   assign Y4 = t219;
   assign Y5 = t220;
   assign Y2 = t221;
   assign Y3 = t222;
   assign Y6 = t223;
   assign Y7 = t224;
   assign Y8 = t233;
   assign Y9 = t234;
   assign Y12 = t235;
   assign Y13 = t236;
   assign Y10 = t237;
   assign Y11 = t238;
   assign Y14 = t239;
   assign Y15 = t240;
   assign t217 = tm445[12:1];
   assign t218 = tm446[12:1];
   assign t219 = tm447[12:1];
   assign t220 = tm448[12:1];
   assign t221 = tm449[12:1];
   assign t222 = tm450[12:1];
   assign t223 = tm451[12:1];
   assign t224 = tm452[12:1];
   assign t233 = tm461[12:1];
   assign t234 = tm462[12:1];
   assign t235 = tm463[12:1];
   assign t236 = tm464[12:1];
   assign t237 = tm465[12:1];
   assign t238 = tm466[12:1];
   assign t239 = tm467[12:1];
   assign t240 = tm468[12:1];

    addfxp #(13, 1) add21430(.a({{1{a33[11]}}, a33}), .b({{1{a34[11]}}, a34}), .clk(clk), .q(tm437));    // 0
    addfxp #(13, 1) add21445(.a({{1{a35[11]}}, a35}), .b({{1{a36[11]}}, a36}), .clk(clk), .q(tm438));    // 0
    subfxp #(13, 1) sub21459(.a({{1{a33[11]}}, a33}), .b({{1{a34[11]}}, a34}), .clk(clk), .q(tm439));    // 0
    subfxp #(13, 1) sub21473(.a({{1{a35[11]}}, a35}), .b({{1{a36[11]}}, a36}), .clk(clk), .q(tm440));    // 0
    addfxp #(13, 1) add21488(.a({{1{a41[11]}}, a41}), .b({{1{a42[11]}}, a42}), .clk(clk), .q(tm441));    // 0
    addfxp #(13, 1) add21503(.a({{1{a43[11]}}, a43}), .b({{1{a44[11]}}, a44}), .clk(clk), .q(tm442));    // 0
    subfxp #(13, 1) sub21517(.a({{1{a41[11]}}, a41}), .b({{1{a42[11]}}, a42}), .clk(clk), .q(tm443));    // 0
    subfxp #(13, 1) sub21531(.a({{1{a43[11]}}, a43}), .b({{1{a44[11]}}, a44}), .clk(clk), .q(tm444));    // 0
    addfxp #(13, 1) add21630(.a({{1{a49[11]}}, a49}), .b({{1{a50[11]}}, a50}), .clk(clk), .q(tm453));    // 0
    addfxp #(13, 1) add21645(.a({{1{a51[11]}}, a51}), .b({{1{a52[11]}}, a52}), .clk(clk), .q(tm454));    // 0
    subfxp #(13, 1) sub21659(.a({{1{a49[11]}}, a49}), .b({{1{a50[11]}}, a50}), .clk(clk), .q(tm455));    // 0
    subfxp #(13, 1) sub21673(.a({{1{a51[11]}}, a51}), .b({{1{a52[11]}}, a52}), .clk(clk), .q(tm456));    // 0
    addfxp #(13, 1) add21688(.a({{1{a57[11]}}, a57}), .b({{1{a58[11]}}, a58}), .clk(clk), .q(tm457));    // 0
    addfxp #(13, 1) add21703(.a({{1{a59[11]}}, a59}), .b({{1{a60[11]}}, a60}), .clk(clk), .q(tm458));    // 0
    subfxp #(13, 1) sub21717(.a({{1{a57[11]}}, a57}), .b({{1{a58[11]}}, a58}), .clk(clk), .q(tm459));    // 0
    subfxp #(13, 1) sub21731(.a({{1{a59[11]}}, a59}), .b({{1{a60[11]}}, a60}), .clk(clk), .q(tm460));    // 0
    addfxp #(13, 1) add21538(.a({{1{t209[11]}}, t209}), .b({{1{t213[11]}}, t213}), .clk(clk), .q(tm445));    // 1
    addfxp #(13, 1) add21545(.a({{1{t210[11]}}, t210}), .b({{1{t214[11]}}, t214}), .clk(clk), .q(tm446));    // 1
    subfxp #(13, 1) sub21551(.a({{1{t209[11]}}, t209}), .b({{1{t213[11]}}, t213}), .clk(clk), .q(tm447));    // 1
    subfxp #(13, 1) sub21557(.a({{1{t210[11]}}, t210}), .b({{1{t214[11]}}, t214}), .clk(clk), .q(tm448));    // 1
    addfxp #(13, 1) add21580(.a({{1{t211[11]}}, t211}), .b({{1{t216[11]}}, t216}), .clk(clk), .q(tm449));    // 1
    subfxp #(13, 1) sub21586(.a({{1{t212[11]}}, t212}), .b({{1{t215[11]}}, t215}), .clk(clk), .q(tm450));    // 1
    subfxp #(13, 1) sub21592(.a({{1{t211[11]}}, t211}), .b({{1{t216[11]}}, t216}), .clk(clk), .q(tm451));    // 1
    addfxp #(13, 1) add21599(.a({{1{t212[11]}}, t212}), .b({{1{t215[11]}}, t215}), .clk(clk), .q(tm452));    // 1
    addfxp #(13, 1) add21738(.a({{1{t225[11]}}, t225}), .b({{1{t229[11]}}, t229}), .clk(clk), .q(tm461));    // 1
    addfxp #(13, 1) add21745(.a({{1{t226[11]}}, t226}), .b({{1{t230[11]}}, t230}), .clk(clk), .q(tm462));    // 1
    subfxp #(13, 1) sub21751(.a({{1{t225[11]}}, t225}), .b({{1{t229[11]}}, t229}), .clk(clk), .q(tm463));    // 1
    subfxp #(13, 1) sub21757(.a({{1{t226[11]}}, t226}), .b({{1{t230[11]}}, t230}), .clk(clk), .q(tm464));    // 1
    addfxp #(13, 1) add21780(.a({{1{t227[11]}}, t227}), .b({{1{t232[11]}}, t232}), .clk(clk), .q(tm465));    // 1
    subfxp #(13, 1) sub21786(.a({{1{t228[11]}}, t228}), .b({{1{t231[11]}}, t231}), .clk(clk), .q(tm466));    // 1
    subfxp #(13, 1) sub21792(.a({{1{t227[11]}}, t227}), .b({{1{t232[11]}}, t232}), .clk(clk), .q(tm467));    // 1
    addfxp #(13, 1) add21799(.a({{1{t228[11]}}, t228}), .b({{1{t231[11]}}, t231}), .clk(clk), .q(tm468));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 101
// Gap: 128
module rc21823(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [11:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [11:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [23:0] t0;
   wire [23:0] s0;
   assign t0 = {X0, X1};
   wire [23:0] t1;
   wire [23:0] s1;
   assign t1 = {X2, X3};
   wire [23:0] t2;
   wire [23:0] s2;
   assign t2 = {X4, X5};
   wire [23:0] t3;
   wire [23:0] s3;
   assign t3 = {X6, X7};
   wire [23:0] t4;
   wire [23:0] s4;
   assign t4 = {X8, X9};
   wire [23:0] t5;
   wire [23:0] s5;
   assign t5 = {X10, X11};
   wire [23:0] t6;
   wire [23:0] s6;
   assign t6 = {X12, X13};
   wire [23:0] t7;
   wire [23:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[23:12];
   assign Y1 = s0[11:0];
   assign Y2 = s1[23:12];
   assign Y3 = s1[11:0];
   assign Y4 = s2[23:12];
   assign Y5 = s2[11:0];
   assign Y6 = s3[23:12];
   assign Y7 = s3[11:0];
   assign Y8 = s4[23:12];
   assign Y9 = s4[11:0];
   assign Y10 = s5[23:12];
   assign Y11 = s5[11:0];
   assign Y12 = s6[23:12];
   assign Y13 = s6[11:0];
   assign Y14 = s7[23:12];
   assign Y15 = s7[11:0];

   perm21821 instPerm25121(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 101
// Gap: 128
module perm21821(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[2];
   assign inBank0[1] = addr0[3] ^ addr0[0];
   assign inBank0[2] = addr0[4] ^ addr0[1];
   assign inAddr0[0] = addr0[5];
   assign inAddr0[1] = addr0[6];
   assign inAddr0[2] = addr0[7];
   assign inAddr0[3] = addr0[8];
   assign inAddr0[4] = addr0[9];
   assign inAddr0[5] = addr0[0];
   assign inAddr0[6] = addr0[1];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[8] ^ addr0b[1];
   assign outBank0[2] = addr0b[9] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outAddr0[6] = addr0b[9];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[8] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[9] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];
   assign outAddr_a0[6] = addr0c[9];

   assign inBank1[0] = addr1[2];
   assign inBank1[1] = addr1[3] ^ addr1[0];
   assign inBank1[2] = addr1[4] ^ addr1[1];
   assign inAddr1[0] = addr1[5];
   assign inAddr1[1] = addr1[6];
   assign inAddr1[2] = addr1[7];
   assign inAddr1[3] = addr1[8];
   assign inAddr1[4] = addr1[9];
   assign inAddr1[5] = addr1[0];
   assign inAddr1[6] = addr1[1];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[8] ^ addr1b[1];
   assign outBank1[2] = addr1b[9] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outAddr1[6] = addr1b[9];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[8] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[9] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];
   assign outAddr_a1[6] = addr1c[9];

   assign inBank2[0] = addr2[2];
   assign inBank2[1] = addr2[3] ^ addr2[0];
   assign inBank2[2] = addr2[4] ^ addr2[1];
   assign inAddr2[0] = addr2[5];
   assign inAddr2[1] = addr2[6];
   assign inAddr2[2] = addr2[7];
   assign inAddr2[3] = addr2[8];
   assign inAddr2[4] = addr2[9];
   assign inAddr2[5] = addr2[0];
   assign inAddr2[6] = addr2[1];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[8] ^ addr2b[1];
   assign outBank2[2] = addr2b[9] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outAddr2[6] = addr2b[9];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[8] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[9] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];
   assign outAddr_a2[6] = addr2c[9];

   assign inBank3[0] = addr3[2];
   assign inBank3[1] = addr3[3] ^ addr3[0];
   assign inBank3[2] = addr3[4] ^ addr3[1];
   assign inAddr3[0] = addr3[5];
   assign inAddr3[1] = addr3[6];
   assign inAddr3[2] = addr3[7];
   assign inAddr3[3] = addr3[8];
   assign inAddr3[4] = addr3[9];
   assign inAddr3[5] = addr3[0];
   assign inAddr3[6] = addr3[1];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[8] ^ addr3b[1];
   assign outBank3[2] = addr3b[9] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outAddr3[6] = addr3b[9];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[8] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[9] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];
   assign outAddr_a3[6] = addr3c[9];

   assign inBank4[0] = addr4[2];
   assign inBank4[1] = addr4[3] ^ addr4[0];
   assign inBank4[2] = addr4[4] ^ addr4[1];
   assign inAddr4[0] = addr4[5];
   assign inAddr4[1] = addr4[6];
   assign inAddr4[2] = addr4[7];
   assign inAddr4[3] = addr4[8];
   assign inAddr4[4] = addr4[9];
   assign inAddr4[5] = addr4[0];
   assign inAddr4[6] = addr4[1];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[8] ^ addr4b[1];
   assign outBank4[2] = addr4b[9] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outAddr4[6] = addr4b[9];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[8] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[9] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];
   assign outAddr_a4[6] = addr4c[9];

   assign inBank5[0] = addr5[2];
   assign inBank5[1] = addr5[3] ^ addr5[0];
   assign inBank5[2] = addr5[4] ^ addr5[1];
   assign inAddr5[0] = addr5[5];
   assign inAddr5[1] = addr5[6];
   assign inAddr5[2] = addr5[7];
   assign inAddr5[3] = addr5[8];
   assign inAddr5[4] = addr5[9];
   assign inAddr5[5] = addr5[0];
   assign inAddr5[6] = addr5[1];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[8] ^ addr5b[1];
   assign outBank5[2] = addr5b[9] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outAddr5[6] = addr5b[9];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[8] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[9] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];
   assign outAddr_a5[6] = addr5c[9];

   assign inBank6[0] = addr6[2];
   assign inBank6[1] = addr6[3] ^ addr6[0];
   assign inBank6[2] = addr6[4] ^ addr6[1];
   assign inAddr6[0] = addr6[5];
   assign inAddr6[1] = addr6[6];
   assign inAddr6[2] = addr6[7];
   assign inAddr6[3] = addr6[8];
   assign inAddr6[4] = addr6[9];
   assign inAddr6[5] = addr6[0];
   assign inAddr6[6] = addr6[1];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[8] ^ addr6b[1];
   assign outBank6[2] = addr6b[9] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outAddr6[6] = addr6b[9];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[8] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[9] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];
   assign outAddr_a6[6] = addr6c[9];

   assign inBank7[0] = addr7[2];
   assign inBank7[1] = addr7[3] ^ addr7[0];
   assign inBank7[2] = addr7[4] ^ addr7[1];
   assign inAddr7[0] = addr7[5];
   assign inAddr7[1] = addr7[6];
   assign inAddr7[2] = addr7[7];
   assign inAddr7[3] = addr7[8];
   assign inAddr7[4] = addr7[9];
   assign inAddr7[5] = addr7[0];
   assign inAddr7[6] = addr7[1];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[8] ^ addr7b[1];
   assign outBank7[2] = addr7b[9] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outAddr7[6] = addr7b[9];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[8] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[9] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];
   assign outAddr_a7[6] = addr7c[9];

   nextReg #(97, 7) nextReg_25126(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_25129(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_21821 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .x4(w_2_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_2_4[logDepth-1:0]),
        .outAddr4(u_2_4), 
        .x5(w_2_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_2_5[logDepth-1:0]),
        .outAddr5(u_2_5), 
        .x6(w_2_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_2_6[logDepth-1:0]),
        .outAddr6(u_2_6), 
        .x7(w_2_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_2_7[logDepth-1:0]),
        .outAddr7(u_2_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 96)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 99)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 96) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 96)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_1 = {x4, inAddr4};
    assign w_0_3 = {x5, inAddr5};
    assign w_0_5 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign y4 = z_2_4;
    assign y5 = z_2_5;
    assign y6 = z_2_6;
    assign y7 = z_2_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[1];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[0];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[5];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[5];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
endmodule

module memArray1024_21821(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 24;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(128, 7) nextReg_25134(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
